{"version":3,"sources":["data/timers.ts","Plot/margin.ts","Plot/XAxis.tsx","Plot/YAxis.tsx","helpers/simulator.ts","Plot/CompareRegisterHandle.tsx","Plot/InterruptArrow.tsx","Plot/Curve.tsx","helpers/compareRegisterUtil.ts","state/useHash.ts","data/lgt328p/index.ts","data/atmega328p/index.ts","helpers/types.ts","data/index.ts","state/state.tsx","helpers/helpers.ts","Panes/state.ts","Plot/Plot.tsx","Panes/Code.tsx","Panes/TimerSetup.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["tsv","str","trim","split","map","line","join","registers","constraints","tsvRegisters","configs","tsvConstraints","table","filter","startsWith","header","row","Object","fromEntries","colName","i","replace","values","includes","rows","register","column","variableDescriptions","Timer","timerMode","topValue","clockPrescalerOrSource","clockDoubler","ExternalClockInput","FCPU_UI","CompareOutputModeA","interruptA","OCnA_OutputPort","OCnA_OutputCurrent","CompareOutputModeB","interruptB","OCnB_OutputPort","OCnB_OutputCurrent","CompareOutputModeC","interruptC","OCnC_OutputPort","OCnC_OutputCurrent","Extras","updateOcrMoment","setTovMoment","InterruptOnTimerOverflow","InputCaptureNoiseSupression","InterruptOnInputCapture","InputCaptureEdgeSelect","DeadTime","valueDescriptions","Normal","PCPWM","CTC","FPWM","PFCPWM","ICR1","ICR3","B1","B3","C0","D3","D6","E4","F1","F5","F6","F7","F2","F4","B2","F3","D5","TOP","BOTTOM","immediate","title","on","margin","toFixed","float","digits","padding","Math","pow","round","XAxis","height","xScale","nodeRef","useRef","gEl","current","useLayoutEffect","xTicks","ticks","domain","select","call","g","attr","axisBottom","tickValues","tickPadding","tickSize","tickFormat","t","s","Number","isFinite","m","h","ms","us","ns","formatTime","tickSizeOuter","className","ref","YAxis","width","yScale","yTicks","axisLeft","v","_d","_","path","offsetCounter","counter","offset","top","cpuToTcnt","tcnt","dir","tcntToCpu","getTimerLength","cpu","matches","a","b","constrain","n","min","max","CompareRegisterHandle","forwardRef","setCompareRegisterValue","compareRegisterValue","yExtent","name","useState","draggingTV","setDraggingTV","useImperativeHandle","onMouseUp","onMouseMove","y","e","preventDefault","scaled","invert","scaledY","onMouseDown","useCallback","x1","x2","y1","y2","onTouchStart","fill","x","dy","dx","displayName","InterruptArrow","label","flagValues","TCNT","transform","d","Curve","data","idx","curve","curveLinear","datum","theLine","undefined","getName","genericName","OutputA","timerNr","OutputB","OutputC","Input","DeadTimeA","DeadTimeB","getIsTop","getIsInterrupt","getIsActiveOutput","getIsUsed","getIsActiveDeadTime","getIsInput","getIsOutput","getIsDeadTime","compareRegs","getCompareRegTraits","value","parseFloat","code","isInput","isOutput","isDeadTime","isActiveOutput","isTop","isInterrupt","isUsed","getAllCompareRegTraits","getHashParams","hash","window","location","slice","URLSearchParams","setFullHash","debounce","pathname","leading","trailing","setHashFromObject","record","cleanRecord","entries","hashParams","toString","timers","forEach","push","PanelModes","MicroControllers","LGT8F328P","lgt328p","ATMEGA328P","atmega328p","panelModeState","atom","key","default","usePrevious","useEffect","defaultState","mcu","timer","RegisterLocationStateChange","params","setHashParams","handleHashChange","addEventListener","removeEventListener","useHashParams","prev","withNulls","useSetRecoilState","userConfigBulkState","RegisterLocationState","userConfigState_internal","atomFamily","param","selector","get","Error","set","obj","DefaultValue","userConfigState","selectorFamily","variable","delete","setHashParam","mcuTimers","micro","timerState","splitTables","left","tables","changed","cluster","remaining","colsLeft","keys","colsRight","intersection","length","uniq","isTruthy","getFullDomains","domains","getConstrainedDomains","domains_","done","every","negated","some","negatedVals","remove","val","positiveVals","miniDomain","flatMap","sizeBefore","groupsState","groupState","groupIdx","suggestedGroupAssignmentState","userState","groupConfigState","group","constrainedGroupDomainsState","instantiations","mapValues","suggestedVariableAssignmentState","groupIdxFromVariableState","suggestedAssignmentState","assignments","flat","assign","relevantVariables","getVariables","userConfig","userValue","findIndex","hasOwnProperty","fullGroupDomainsState","constrainedDomainState","fullDomainState","variableOptionsState","fullDomains","constrainedDomain","selectedWithout","defaultValue","forcedOption","suggestedOption","selectedOption","options","isSuggested","isDisabled","Plot","style","useRecoilValue","counterMax","parseInt","prescaler","NaN","FCPU","cpuHz","tovTime","OCRnXs","OCRnXs_behaviour","ICRn","deadTimeEnable","deadTimeA","deadTimeB","IOCR_states","traits","find","ocrMax","ioCount","iocr","useRecoilState","regVal","setReg","simulation","prescaledCPUEnd","results","OCnXs","MATCH_Xs","OVF","CAPT","deadTimes","freq","isNaN","actions","behaviour","action","at","matchAt","to","actionDeadTimeA","actionDeadTimeB","bClear","bSet","tcntEventTimes","prescaledCPU","nextEvents","distToNext","simTimer","containerRef","useSize","height_","activeOCnXs","height_timer","scaleLinear","extent","range","rangeRound","containerEl","handleMouseUp","handleMouseMove","offsetY","MouseEvent","clientY","targetTouches","getBoundingClientRect","document","passive","Tag","k","curveStepAfter","j","setUserConfigValue","yExtent2","sqrt","LinkToThisPage","href","url","setUrl","handleUrlChange","Code","codeContainerRef","CopyToClipboard","CompareRegsCode","Interrupts","TimerConfgCode","variables","regName","assignmentsStr","suggestedConfig","interruptCommonSignature","React","memo","clicked","setClicked","setTimeout","Button","color","onClick","copy","textContent","console","log","VariableConfig","humanName","descr","descrTitle","CheckboxGroup","inline","onChange","Whisper","placement","trigger","speaker","Tooltip","Icon","icon","fontSize","valueDescription","Checkbox","indeterminate","disabled","getAllVariablesInGroups","groups","getPanesGroupedByDescription","allVariablesInGroups","variableDescription","panelName","namedVariables","getHiddenPane","allVariables","visibleVariables","difference","TimerSetup","panels","Internal","ByDependencies","getPanesByGroup","FlexboxGrid","flexGrow","overflow","Item","Panel","bordered","shaded","defaultExpanded","direction","bottom","borderTop","touchAction","minHeight","gh","App","timerIdx","panelMode","setPanelMode","isLoading","rel","Container","Header","Navbar","appearance","src","alt","marginTop","textAlign","Body","Nav","Dropdown","aChip","onSelect","eventKey","activeKey","pullRight","mode","target","frameBorder","scrolling","Content","background","position","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e8fab5bb.chunk.js","sourcesContent":["export const tsv = (str: string) => {\n  str = str\n    .trim()\n    .split('\\n')\n    .map((line) => line.trim())\n    .join('\\n')\n  const [registers, ...constraints] = str.trim().split('\\n\\n')\n  return {\n    registers: tsvRegisters(registers),\n    configs: constraints.map(tsvConstraints)\n  }\n}\nexport const tsvConstraints = (str: string) => {\n  const table = str\n    .trim()\n    .split('\\n')\n    .filter((line) => !line.startsWith('//'))\n    .map((line) => line.trim().split('\\t'))\n  const [header, ...rows] = table\n  return rows\n    .map((row) =>\n      Object.fromEntries(\n        header.map((colName, i) => [\n          colName,\n          row[i].trim().replace(/\\\\n/g, '\\n').replace(/\\\\t/g, '\\t')\n        ])\n      )\n    )\n    .filter((row) => !Object.values(row).includes('-'))\n}\n\nexport const tsvRegisters = (str: string) => {\n  const table = str\n    .trim()\n    .split('\\n')\n    .filter((line) => !line.startsWith('//'))\n    .map((line) => line.trim().split('\\t'))\n  const [header, ...rows] = table\n  return Object.fromEntries(\n    header.map((register, column) => [register, rows.map((row) => row[column])])\n  )\n}\n\nexport const variableDescriptions: Record<string, Record<string, string>> = {\n  Timer: {\n    timerMode: 'Timer mode',\n    topValue: 'Top value of timer',\n    clockPrescalerOrSource: 'Clock prescaler or external source',\n    clockDoubler: 'Double timer clock speed',\n    ExternalClockInput: 'External clock input port',\n    FCPU_UI: 'CPU Clock'\n  },\n  'Output A': {\n    CompareOutputModeA: 'Behaviour',\n    interruptA: 'Interrupt on match',\n    OCnA_OutputPort: 'Output port',\n    OCnA_OutputCurrent: 'Output current'\n  },\n  'Output B': {\n    CompareOutputModeB: 'Behaviour',\n    interruptB: 'Interrupt on match',\n    OCnB_OutputPort: 'Output port',\n    OCnB_OutputCurrent: 'Output current'\n  },\n  'Output C': {\n    CompareOutputModeC: 'Behaviour',\n    interruptC: 'Interrupt on match',\n    OCnC_OutputPort: 'Output port',\n    OCnC_OutputCurrent: 'Output current'\n  },\n  Extras: {\n    updateOcrMoment: 'When are the OCRs updated',\n    setTovMoment: 'When overflow interrupt is triggered',\n    InterruptOnTimerOverflow: 'Interrupt on Timer Overflow',\n    InputCaptureNoiseSupression: 'Input capture noise supression',\n    InterruptOnInputCapture: 'Interrupt on Input Capture',\n    InputCaptureEdgeSelect: 'Input Capture Edge Select',\n    DeadTime: 'Insert dead time'\n  }\n}\nexport const valueDescriptions: Record<string, Record<string, string>> = {\n  timerMode: {\n    Normal: 'Counts always up, overflowing to zero. Duty is always 50%.',\n    PCPWM:\n      'Phase correct PWM: Counts up to TOP then down to 0. Output compare registers updated at TOP, maintaining the phase of the PWM. Output is set in one direction and cleared on the other one. Duty goes from full 0% to full 100% but maximum frequency is half that of FPWM.',\n    CTC: 'Clear timer on compare: Counts up to TOP and resets to zero. Duty is always 50%.',\n    FPWM: 'Fast PWM: Counts up to TOP and resets to zero. Duty cycle cannot go to 0% (on clear-on-compare-match), or to 100% (on set-on-compare-match).',\n    PFCPWM:\n      'Phase frequency correct PWM: idem to PCPWM, but output compare registers are updated at zero, resulting in a constant frequency even when the output compare registers are changed during operation.'\n  },\n  topValue: {\n    ICR1: 'If ICR1 is not used as top, the input capture pin (ICP1) is PB0.\\nIf ICR1 is used as top, ICP1 is disconnected. The input compare register is not double-buffered so it will be updated immediatly (and not on TOP or BOTTOM like OCRs). This may make the timer lose a match if changed near it.',\n    ICR3: 'If ICR3 is not used as top, the input capture pin (ICP3) is PF4.\\nIf ICR3 is used as top, ICP3 is disconnected. The input compare register is not double-buffered so it will be updated immediatly (and not on TOP or BOTTOM like OCRs). This may make the timer lose a match if changed near it.'\n  },\n  OCnA_OutputPort: {\n    'E4+C0': 'Both at the same time',\n    'AC0P(D6)':\n      'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t15 \\nQFP32:\tD6\t10 \\nSSOP20:\tD6\t9',\n    B1: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t19 \\nQFP32:\tD9\t13 \\nSSOP20:\tD9\t11',\n    B3: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t23 \\nQFP32:\tD11\t15 \\nSSOP20:\tD11\t12',\n    C0: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t35 \\nQFP32:\tA0\t25 \\nSSOP20:\tA0\t17',\n    D3: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t1 \\nQFP32:\tD3\t1 \\nSSOP20:\tD3\t3',\n    D6: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t14 \\nQFP32:\tD6\t10 \\nSSOP20:\tD6\t9',\n    E4: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t3 \\nQFP32:\t-\t3 \\nSSOP20:\t-\t-',\n    F1: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t46 \\nQFP32:\tD1\t31 \\nSSOP20:\tD1\t1',\n    F5: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t9 \\nQFP32:\t-\t6 \\nSSOP20:\tD?\t6',\n    F6: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t10 \\nQFP32:\t-\t- \\nSSOP20:\t-\t-',\n    F7: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t17 \\nQFP32:\t-\t- \\nSSOP20:\tD7\t10'\n  },\n  OCnB_OutputPort: {\n    F2: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t48 \\nQFP32:\tD2\t32 \\nSSOP20:\tD2\t2',\n    F7: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t17 \\nQFP32:\t-\t- \\nSSOP20:\tD7\t10',\n    D3: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t1 \\nQFP32:\tD3\t1 \\nSSOP20:\tD3\t3',\n    F4: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t5 \\nQFP32:\t-\t5 \\nSSOP20:\tD3\t3',\n    B2: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t20 \\nQFP32:\tD10\t14 \\nSSOP20:\tD10\t12',\n    F3: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t4 \\nQFP32:\t-\t- \\nSSOP20:\t-\t-',\n    D5: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t13 \\nQFP32:\tD5\t9 \\nSSOP20:\tD5\t8'\n  },\n  OCnC_OutputPort: {\n    F3: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t4 \\nQFP32:\t-\t- \\nSSOP20:\t-\t-'\n  },\n  updateOcrMoment: {\n    TOP: 'OCR registers are updated whenever the timer reaches its top. Can be a fixed number or the value of some register',\n    BOTTOM: 'OCR registers are updated when the timer resets to zero',\n    immediate:\n      'OCR registers are updated as soon as they are changed, without a buffer.'\n  },\n  InterruptOnInputCapture: {\n    title: `When ICRn not used as TOP and a capture is triggered (PB0 in Timer1, PF4 in Timer3), the counter value is copied into the input capture register (ICRn). The event will also set the input capture flag (ICFn), and this can be used to cause an input capture interrupt, if this interrupt is enabled. \\nIt can also be used to trigger an interrupt on compare match against the counter.`\n  },\n  InputCaptureNoiseSupression: {\n    on: `The noise canceler improves noise immunity by using a simple digital filtering scheme. The noise canceler input is monitored over four samples, and all four must be equal for changing the output that in turn is used by the edge detector.\n    When enabled, the noise canceler introduces additional four system clock cycles of delay from a change applied\n    to the input, to the update of the ICRn register. The noise canceler uses the system clock and is therefore not affected by the\n    prescaler.`\n  },\n  InputCaptureEdgeSelect: {\n    title: `When the ICRn is used as TOP value, the ICPn is disconnected and consequently the input capture function is disabled.`\n  },\n  DeadTime: {\n    on: `dead time enable control\n    Setting DTENn to logic one, inserting dead time is enable. Base on waveform generated in B channel compare output, both OCnA and OCnB can insert dead time, whose interval is decided by corresponding counter time of DTRn register. Waveform polarity output by OCnA is decided by relationship between CnMn and COMnB, for details referring to list for waveform polarity after inserting dead time.`\n  }\n}\n","export const margin = { top: 30, right: 120, bottom: 30, left: 50 }\n","import { ScaleLinear, ticks, select, axisBottom } from 'd3'\nimport { useRef, useLayoutEffect } from 'react'\nimport { margin } from './margin'\n\ntype ohNoItIsAny = any\n\nconst toFixed = (float: number, digits = 0) => {\n  const padding = Math.pow(10, digits)\n  return Math.round(float * padding) / padding\n}\n\nexport function formatTime(s: ohNoItIsAny) {\n  s = Number(s)\n  if (!Number.isFinite(s)) return '--'\n  if (s === 0) return '0'\n\n  const m = s / 60\n  const h = s / 60 / 60\n  const ms = s * 1000\n  const us = ms * 1000\n  const ns = us * 1000\n  if (ns < 10) return toFixed(ns, 1) + 'ns'\n  if (ns < 1000) return toFixed(ns) + 'ns'\n  if (us < 10) return toFixed(us, 1) + 'μs'\n  if (us < 1000) return toFixed(us) + 'μs'\n  if (ms < 10) return toFixed(ms, 1) + 'ms'\n  if (ms < 1000) return toFixed(ms) + 'ms'\n  if (s < 10) return toFixed(s, 1) + 's'\n  if (h > 1) return toFixed(h, 0) + 'h' + toFixed(m % 60, 1) + 'm'\n  if (m > 5) return toFixed(m, 0) + 'm' + toFixed(s % 60, 1) + 's'\n  return toFixed(s, 0) + 's'\n}\n\ntype Props = {\n  height: number\n  xScale: ScaleLinear<number, number>\n}\nexport default function XAxis({ height, xScale }: Props) {\n  const nodeRef = useRef<SVGSVGElement>(null)\n  const gEl = nodeRef.current\n  useLayoutEffect(() => {\n    if (!gEl) return\n    const xTicks = ticks(xScale.domain()[0], xScale.domain()[1], 10)\n\n    select(gEl).call((g) => {\n      g.attr('transform', `translate(0,${height - margin.bottom})`)\n        // .transition()\n        // .ease(easeLinear)\n        // .duration(100)\n        .call(\n          axisBottom(xScale)\n            .tickValues(xTicks)\n            .tickPadding(10)\n            .tickSize(-height + margin.top + margin.bottom)\n            .tickFormat((t) => formatTime(t as any))\n            .tickSizeOuter(0)\n        )\n\n      //   .call((g) => g.select('.domain').remove())\n      // g.call((g) => g.select('.domain').remove())\n\n      // return the selection:\n    })\n  }, [gEl, xScale, height])\n\n  return <g className=\"x axis\" ref={nodeRef} />\n}\n","import { ScaleLinear, ticks, select, axisLeft } from 'd3'\nimport { useRef, useLayoutEffect } from 'react'\n\nimport { margin } from './margin'\n\ntype Props = {\n  width: number\n  yScale: ScaleLinear<number, number>\n}\nexport default function YAxis({ width, yScale }: Props) {\n  const nodeRef = useRef<SVGSVGElement>(null)\n  const gEl = nodeRef.current\n\n  useLayoutEffect(() => {\n    if (!gEl) return\n    const yTicks = ticks(yScale.domain()[0], yScale.domain()[1], 10)\n    select(gEl)\n      // .transition()\n      // .duration(200)\n      .call((g) =>\n        g.attr('transform', `translate(${margin.left},0)`).call(\n          axisLeft(yScale)\n            .tickValues(yTicks)\n            .tickPadding(10)\n            .tickSize(-width + margin.right + margin.left - 1)\n            .tickFormat((v: any) => v)\n        )\n      )\n      .call((g) =>\n        g.select('.domain').attr(\n          'd',\n          (_d, _, path) =>\n            // close path so the domain has a right border\n            select(path[0]).attr('d') + 'z'\n        )\n      )\n  }, [gEl, yScale, width])\n\n  return <g className=\"y axis\" ref={nodeRef} />\n}\n","/* eslint-disable no-loop-func */\nimport { uniq } from 'lodash'\n\n/*\nPCPWM == updates at top\nPFCPWM == updates at bottom\nbut this should be passed from update OCRnX upate time bit value\n*/\ntype TimerMode = 'Normal' | 'PCPWM' | 'CTC' | 'FPWM' | 'PFCPWM'\ntype Counter = { tcnt: number; dir: number }\nconst tcntToCpu = ({ tcnt, dir }: Counter, top: number) => {\n  if (dir === -1) return 2 * top - tcnt\n  return tcnt\n}\nconst offsetCounter = (\n  counter: Counter,\n  offset: number,\n  top: number,\n  timerMode: TimerMode\n) => cpuToTcnt(tcntToCpu(counter, top) + offset, top, timerMode)\n\nconst getTimerLength = (top: number, timerMode: TimerMode) => {\n  const isDoubleSlope = ['PCPWM', 'PFCPWM'].includes(timerMode)\n  return isDoubleSlope ? top * 2 : top\n}\nconst cpuToTcnt = (cpu: number, top: number, timerMode: TimerMode) => {\n  while (cpu < 0) cpu += top\n  const isDoubleSlope = ['PCPWM', 'PFCPWM'].includes(timerMode)\n  if (!isDoubleSlope) {\n    // e.g top = 3\n    // 0 1 2 3 4 -- cpu\n    // 0 1 2 3 0 -- single slope\n    return { tcnt: cpu % (top + 1), dir: 1 }\n  }\n  // e.g top = 3\n  // 0 1 2 3 4 5 6\n  // 0 1 2 3 2 1 0 -- double slope\n  const tcnt = cpu % (top * 2)\n  if (tcnt < top) return { tcnt, dir: 1 }\n  return { tcnt: top * 2 - tcnt, dir: -1 }\n}\nconst matches = (a: Counter, b: Counter) => a.tcnt === b.tcnt && a.dir === b.dir\n\ntype Props = {\n  timerMode: TimerMode\n  prescaler: number\n  cpuHz: number\n  top: number\n  counterMax: number\n  tovTime: 'BOTTOM' | 'TOP' | 'MAX'\n  OCRnXs: number[]\n  OCRnXs_behaviour: (\n    | 'clear'\n    | 'set'\n    | 'set-on-match, clear-at-max'\n    | 'clear-on-match, set-at-max'\n    | 'toggle'\n    | 'clear-up, set-down'\n    | 'set-up, clear-down'\n  )[]\n  ICRn: number\n  deadTimeEnable: boolean\n  deadTimeA: number\n  deadTimeB: number\n}\nconst TOGGLE = -1\nexport default function simTimer({\n  timerMode,\n  prescaler,\n  cpuHz,\n  top,\n  counterMax,\n  tovTime,\n  OCRnXs,\n  OCRnXs_behaviour,\n  ICRn,\n  deadTimeEnable,\n  deadTimeA,\n  deadTimeB\n}: Props) {\n  const prescaledCPUEnd = getTimerLength(top, timerMode) * 4\n  const results = {\n    t: [] as number[],\n    cpu: [] as number[],\n    TCNT: [] as number[],\n    OCnXs: OCRnXs.map(() => [] as number[]),\n    MATCH_Xs: OCRnXs.map(() => [] as number[]),\n    OVF: [] as number[],\n    CAPT: [] as number[],\n    deadTimes: [[], []] as number[][],\n    freq: cpuHz / (getTimerLength(top, timerMode) + 1) / prescaler\n  }\n  if (isNaN(top)) return results\n  let OCnXs = OCRnXs.map(() => 0)\n  let deadTimes = [0, 0]\n\n  const actions = OCRnXs_behaviour.map((behaviour, i) => {\n    const action = {\n      at: [] as { tcnt: number; dir: number; to: number }[],\n      matchAt: OCRnXs[i],\n      behaviour\n    }\n    switch (behaviour) {\n      case 'set':\n        action.at = [{ tcnt: OCRnXs[i], dir: 1, to: 1 }]\n        break\n      case 'clear':\n        action.at = [{ tcnt: OCRnXs[i], dir: 1, to: 0 }]\n        break\n      case 'toggle':\n        action.at = [{ tcnt: OCRnXs[i], dir: 1, to: TOGGLE }]\n        break\n      case 'set-on-match, clear-at-max':\n        action.at = [\n          { tcnt: OCRnXs[i], dir: 1, to: 1 },\n          { tcnt: top, dir: 1, to: 0 }\n        ]\n        break\n      case 'clear-on-match, set-at-max':\n        action.at = [\n          { tcnt: OCRnXs[i], dir: 1, to: 0 },\n          { tcnt: top, dir: 1, to: 1 }\n        ]\n        break\n      case 'set-up, clear-down':\n        action.at = [\n          { tcnt: OCRnXs[i], dir: 1, to: 1 },\n          { tcnt: OCRnXs[i], dir: -1, to: 0 }\n        ]\n        break\n      case 'clear-up, set-down':\n        action.at = [\n          { tcnt: OCRnXs[i], dir: 1, to: 0 },\n          { tcnt: OCRnXs[i], dir: -1, to: 1 }\n        ]\n        break\n    }\n    OCnXs[i] = +!action.at[0]?.to || 0\n    return action\n  })\n\n  let actionDeadTimeA = [] as { tcnt: number; dir: number; to: number }[]\n  let actionDeadTimeB = [] as { tcnt: number; dir: number; to: number }[]\n\n  if (deadTimeEnable) {\n    /* deadtime \n      setB at setB + deadTimeB\n      changeA at setB (to !isAInverted)\n      clearB at clearB\n      changeA at clearB+deadTimeA (to isAInverted)\n    */\n    const bClear = actions[1].at.find(({ to }) => to === 0)!\n    const bSet = actions[1].at.find(({ to }) => to === 1)!\n    actionDeadTimeA = [{ to: 1, tcnt: bClear.tcnt, dir: bClear.dir }]\n    if (deadTimeA < top)\n      actionDeadTimeA.push({\n        to: 0,\n        ...offsetCounter(bClear, deadTimeA, top, timerMode)\n      })\n    actionDeadTimeB = [{ to: 1, tcnt: bSet.tcnt, dir: bSet.dir }]\n    if (deadTimeB < top)\n      actionDeadTimeB.push({\n        to: 0,\n        ...offsetCounter(bSet, deadTimeB, top, timerMode)\n      })\n  }\n  let tcntEventTimes = [\n    // Optimization:\n    // Things happen only when TCNT equals these values.\n    // values surounding the events are added to ensure the plot\n    // keeps the lines at their values until a change happens\n    0,\n    ...OCRnXs,\n    ICRn,\n    ...actionDeadTimeA.map(({ tcnt }) => tcnt),\n    ...actionDeadTimeB.map(({ tcnt }) => tcnt),\n    top,\n    counterMax\n  ].flatMap((n) => [n - 1, n, n + 1])\n\n  let prescaledCPU = -1\n  tcntEventTimes = uniq(tcntEventTimes)\n\n  let counter = {\n    tcnt: -1,\n    dir: 1\n  }\n  while (prescaledCPU < prescaledCPUEnd) {\n    const nextEvents = tcntEventTimes\n      .map((n) => (n - counter.tcnt) * counter.dir)\n      .filter((n) => n > 0)\n    let distToNext = Math.min(...nextEvents)\n    let MATCH_Xs = OCRnXs.map(() => 0)\n    let OVF = 0\n    let CAPT = 0\n    prescaledCPU += distToNext\n\n    counter = cpuToTcnt(prescaledCPU, top, timerMode)\n    if (counter.tcnt === 0 && tovTime === 'BOTTOM') OVF = 1\n    if (counter.tcnt === top && tovTime === 'TOP') OVF = 1\n    if (counter.tcnt === counterMax && tovTime === 'MAX') OVF = 1\n\n    actions.forEach(({ at, matchAt }, i) => {\n      at.forEach((action) => {\n        if (matches(counter, action)) {\n          OCnXs[i] = action.to === TOGGLE ? +!OCnXs[i] : action.to\n        }\n      })\n      ;[actionDeadTimeA, actionDeadTimeB].forEach((at, i) => {\n        at.forEach((action) => {\n          if (matches(counter, action)) {\n            deadTimes[i] = action.to\n          }\n        })\n      })\n      if (counter.tcnt === matchAt) MATCH_Xs[i] = 1\n    })\n\n    if (counter.tcnt === ICRn) CAPT = 1\n    results.t.push((prescaledCPU * prescaler) / cpuHz)\n    results.cpu.push(prescaledCPU * prescaler)\n    results.TCNT.push(counter.tcnt)\n    results.OVF.push(OVF)\n    results.CAPT.push(CAPT)\n    for (const i in OCRnXs_behaviour) {\n      results.OCnXs[i].push(OCnXs[i])\n      results.MATCH_Xs[i].push(MATCH_Xs[i])\n    }\n    for (const i in deadTimes) {\n      results.deadTimes[i].push(deadTimes[i])\n    }\n  }\n  if (deadTimeEnable) {\n    if (OCRnXs_behaviour[0] === OCRnXs_behaviour[1]) {\n      results.OCnXs[0] = results.OCnXs[1].map(\n        (b, i) => +(b || results.deadTimes[0][i])\n      )\n    } else {\n      results.OCnXs[0] = results.OCnXs[1].map(\n        (b, i) => +(!b && !results.deadTimes[0][i])\n      )\n    }\n    results.OCnXs[1] = results.OCnXs[1].map(\n      (b, i) => +(b && !results.deadTimes[1][i])\n    )\n  }\n  return results\n}\n\nexport type Simulation = ReturnType<typeof simTimer>\n","import {\n  forwardRef,\n  MouseEventHandler,\n  useCallback,\n  useImperativeHandle,\n  useState\n} from 'react'\nimport { margin } from './margin'\nimport './CompareRegisterHandle.css'\nimport { ScaleLinear } from 'd3-scale'\n\nexport type CompareRegisterHandleRef = {\n  onMouseUp: MouseEventHandler\n  onMouseMove: (n: number, e: MouseEvent | TouchEvent) => void\n}\ntype Props = {\n  width: number\n  yExtent: [number, number]\n  yScale: ScaleLinear<number, number>\n  setCompareRegisterValue: (n: number) => void\n  compareRegisterValue: number\n  name: string\n}\n\nconst constrain = (n: number, min: number, max: number) =>\n  Math.min(Math.max(n, min), max)\n\nconst CompareRegisterHandle = forwardRef<CompareRegisterHandleRef, Props>(\n  (\n    {\n      width,\n      yScale,\n      setCompareRegisterValue,\n      compareRegisterValue,\n      yExtent,\n      name\n    },\n    ref\n  ) => {\n    const [draggingTV, setDraggingTV] = useState(false)\n    useImperativeHandle(ref, () => ({\n      onMouseUp() {\n        setDraggingTV(false)\n      },\n      onMouseMove(y, e) {\n        e.preventDefault()\n        if (draggingTV) {\n          let scaled = yScale.invert(y)\n          scaled = constrain(Math.round(scaled), ...yExtent)\n          setCompareRegisterValue(scaled)\n        }\n      }\n    }))\n    let scaledY = yScale(constrain(compareRegisterValue, ...yExtent))\n    const onMouseDown = useCallback(\n      (e) => {\n        // e.preventDefault()\n        // e.stopPropagation()\n        setDraggingTV(true)\n      },\n      [setDraggingTV]\n    )\n    return (\n      <>\n        <line\n          className={`OCR ${name}`}\n          x1={margin.left}\n          x2={width - margin.right}\n          y1={scaledY}\n          y2={scaledY}\n        ></line>\n        <line\n          className={`OCRHandle ${name}`}\n          onMouseDown={onMouseDown}\n          onTouchStart={onMouseDown}\n          x1={margin.left}\n          x2={width}\n          y1={scaledY}\n          y2={scaledY}\n        ></line>\n        <text\n          className={`OCRText ${name}`}\n          fill=\"currentColor\"\n          onMouseDown={onMouseDown}\n          onTouchStart={onMouseDown}\n          y={scaledY}\n          x={width - margin.right}\n          dy=\".32em\"\n          dx=\"10\"\n        >\n          {name}={compareRegisterValue}\n        </text>\n      </>\n    )\n  }\n)\n\nCompareRegisterHandle.displayName = 'CompareRegisterHandle'\n\nexport default CompareRegisterHandle\n","import { ScaleLinear, line } from 'd3'\n\ntype Props = {\n  label: string\n  flagValues: number[]\n  t: number[]\n  TCNT: number[]\n  xScale: ScaleLinear<number, number>\n  yScale: ScaleLinear<number, number>\n}\nexport default function InterruptArrow({\n  label,\n  flagValues,\n  t,\n  TCNT,\n  xScale,\n  yScale\n}: Props) {\n  return (\n    <>\n      {flagValues.map(\n        (n, i) =>\n          n && (\n            <g\n              key={i}\n              transform={`translate(${xScale(t[i])}, ${yScale(TCNT[i])})`}\n            >\n              <path\n                d={\n                  line()([\n                    [-3, -5],\n                    [0, 0],\n                    [3, -5],\n                    [0, 0],\n                    [0, -12],\n                    [20, -12]\n                  ])!\n                }\n              />\n              <text key={i} y=\"-20\" x=\"0\" dy=\".32em\">\n                {label}\n              </text>\n            </g>\n          )\n      )}\n    </>\n  )\n}\n","import { ScaleLinear, line, CurveFactory, curveLinear } from 'd3'\nimport { margin } from './margin'\n\nimport './Curve.css'\n\ntype CurvesProps = {\n  data: [number, number][]\n  xScale: ScaleLinear<number, number>\n  yScale: ScaleLinear<number, number>\n  idx: any\n  name?: string\n  curve?: CurveFactory\n}\n\nexport function Curve({\n  xScale,\n  yScale,\n  data,\n  idx,\n  name,\n  curve = curveLinear\n}: CurvesProps) {\n  const theLine = line<[number, number]>()\n    .x(([t, datum]) => xScale(t)!)\n    .y(([t, datum]) => yScale(datum)!)\n    .curve(curve)\n\n  const d = theLine(data)\n  return (\n    <>\n      <path className={`curve-${idx}`} d={d || undefined}></path>\n      {name && (\n        <text\n          className={`OCText ${name}`}\n          fill=\"currentColor\"\n          y={yScale(0)}\n          x={xScale(0) - margin.left}\n          dy=\".32em\"\n          dx=\"10\"\n        >\n          {name}\n        </text>\n      )}\n    </>\n  )\n}\n","import { TRow } from './types'\n\nexport type GenericCompRegName =\n  | 'OutputA'\n  | 'OutputB'\n  | 'OutputC'\n  | 'Input'\n  | 'DeadTimeA'\n  | 'DeadTimeB'\n\nconst getName = (genericName: GenericCompRegName, values: TRow) =>\n  ({\n    OutputA: `OCR${values.timerNr}A`,\n    OutputB: `OCR${values.timerNr}B`,\n    OutputC: `OCR${values.timerNr}C`,\n    Input: `ICR${values.timerNr}`,\n    DeadTimeA: `DTR${values.timerNr}L`,\n    DeadTimeB: `DTR${values.timerNr}H`\n  }[genericName])\n\nconst getIsTop = (genericName: GenericCompRegName, values: TRow) =>\n  values.topValue === getName(genericName, values)\nconst getIsInterrupt = (genericName: GenericCompRegName, values: TRow) =>\n  values[\n    {\n      OutputA: `OCIE${values.timerNr}A`,\n      OutputB: `OCIE${values.timerNr}B`,\n      OutputC: `OCIE${values.timerNr}C`,\n      Input: `ICIE${values.timerNr}`,\n      DeadTimeA: `DTRL${values.timerNr}`,\n      DeadTimeB: `DTRH${values.timerNr}`\n    }[genericName]\n  ] === '1'\nconst getIsActiveOutput = (genericName: GenericCompRegName, values: TRow) =>\n  (values[\n    {\n      OutputA: `CompareOutputModeA`,\n      OutputB: `CompareOutputModeB`,\n      OutputC: `CompareOutputModeC`,\n      Input: ``,\n      DeadTimeA: ``,\n      DeadTimeB: ``\n    }[genericName]\n  ] || 'disconnect') !== 'disconnect'\nconst getIsActiveDeadTime = (genericName: GenericCompRegName, values: TRow) =>\n  values[\n    {\n      OutputA: ``,\n      OutputB: ``,\n      OutputC: ``,\n      Input: ``,\n      DeadTimeA: `DeadTime`,\n      DeadTimeB: `DeadTime`\n    }[genericName]\n  ] === 'on'\nconst getIsUsed = (genericName: GenericCompRegName, values: TRow) =>\n  getIsTop(genericName, values) ||\n  getIsInterrupt(genericName, values) ||\n  getIsActiveOutput(genericName, values) ||\n  getIsActiveDeadTime(genericName, values)\n\nconst getIsInput = (genericName: GenericCompRegName) =>\n  ({\n    OutputA: false,\n    OutputB: false,\n    OutputC: false,\n    Input: true,\n    DeadTimeA: false,\n    DeadTimeB: false\n  }[genericName])\nconst getIsOutput = (genericName: GenericCompRegName) =>\n  ({\n    OutputA: true,\n    OutputB: true,\n    OutputC: true,\n    Input: false,\n    DeadTimeA: false,\n    DeadTimeB: false\n  }[genericName])\nconst getIsDeadTime = (genericName: GenericCompRegName) =>\n  ({\n    OutputA: false,\n    OutputB: false,\n    OutputC: false,\n    Input: false,\n    DeadTimeA: true,\n    DeadTimeB: true\n  }[genericName])\n\nexport const compareRegs: GenericCompRegName[] = [\n  'OutputA',\n  'OutputB',\n  'OutputC',\n  'Input',\n  'DeadTimeA',\n  'DeadTimeB'\n]\n\nexport const getCompareRegTraits = (\n  genericName: GenericCompRegName,\n  values: TRow\n) => {\n  const name = getName(genericName, values)\n  const value = parseFloat(values[name] || '')\n  // if (Number.isNaN(value)) debugger\n  return {\n    genericName: genericName,\n    name,\n    value,\n    code: `${name} = ${value};`,\n    isInput: getIsInput(genericName),\n    isOutput: getIsOutput(genericName),\n    isDeadTime: getIsDeadTime(genericName),\n    isActiveOutput: getIsActiveOutput(genericName, values),\n    isTop: getIsTop(genericName, values),\n    isInterrupt: getIsInterrupt(genericName, values),\n    isUsed: getIsUsed(genericName, values)\n  }\n}\nexport const getAllCompareRegTraits = (values: TRow) =>\n  compareRegs.map((genericName) => getCompareRegTraits(genericName, values))\n","import { debounce } from 'lodash'\nimport { useState, useEffect } from 'react'\n\nconst getHashParams = () => {\n  const hash = window.location.hash.slice(1)\n  return new URLSearchParams(hash)\n}\n\nconst setFullHash = debounce(\n  (hash: string) => {\n    const currentHash = window.location.hash.slice(1)\n    if (hash !== currentHash) {\n      window.location.replace(`${window.location.pathname}#${hash}`)\n    }\n  },\n  100,\n  // chrome doesn't like too many url changes\n  { leading: true, trailing: true }\n)\nexport const setHashFromObject = (\n  record: Record<string, string | undefined>\n) => {\n  const cleanRecord = Object.fromEntries(\n    Object.entries(record).filter(([, val]) => val !== undefined)\n  ) as Record<string, string>\n  const hashParams = new URLSearchParams(cleanRecord)\n  return setFullHash(hashParams.toString())\n}\nexport const setHashParam = (key: string, value: string | undefined) => {\n  const hashParams = getHashParams()\n  if (value === undefined) {\n    hashParams.delete(key)\n  } else {\n    hashParams.set(key, value)\n  }\n  setFullHash(hashParams.toString())\n}\n\nexport const useHashParams = () => {\n  const [hashParams, setHashParams] = useState<URLSearchParams>(getHashParams())\n  useEffect(() => {\n    const handleHashChange = () => {\n      setHashParams(getHashParams())\n    }\n    window.addEventListener('hashchange', handleHashChange)\n    return () => window.removeEventListener('hashchange', handleHashChange)\n  }, [])\n\n  return Object.fromEntries(hashParams.entries())\n}\n","import raw from 'raw.macro'\nimport { tsv, tsvConstraints } from '../timers'\n\n// const timers = [timer0, timer1, timer2, timer3]\nconst timers = [\n  tsv(raw('./timer0.tsv')),\n  tsv(raw('./timer1.tsv')),\n  tsv(raw('./timer2.tsv')),\n  tsv(raw('./timer3.tsv'))\n]\n\ntimers.forEach((t) =>\n  t.configs.push(\n    tsvConstraints(`\nFCPU\tFCPU_UI\n32000000\t32Mhz\n16000000\t16Mhz\n8000000\t8Mhz\n4000000\t4Mhz\n2000000\t2Mhz\n1000000\t1Mhz\n`)\n  )\n)\nexport default timers\n","import raw from 'raw.macro'\nimport { tsv, tsvConstraints } from '../timers'\n\n// const timers = [timer0, timer1, timer2, timer3]\nconst timers = [\n  tsv(raw('./timer0.tsv')),\n  tsv(raw('./timer1.tsv')),\n  tsv(raw('./timer2.tsv'))\n]\n\ntimers.forEach((t) =>\n  t.configs.push(\n    tsvConstraints(`\nFCPU\tFCPU_UI\n16000000\t16Mhz\n20000000\t20Mhz\n8000000\t8Mhz\n4000000\t4Mhz\n2000000\t2Mhz\n1000000\t1Mhz\n`)\n  )\n)\nexport default timers\n","export type TTableNames = string\n\nexport type TRow = {\n  [k: string]: string\n}\nexport type TTable = TRow[]\nexport type TTimerConfig = TTable[]\n\nexport type TTimerRegisters = {\n  [k: string]: string[]\n}\nexport type TDescriptions = {\n  [k: string]: string\n}\n\nexport type TDefaultState = TRow\n\nexport type TTimer = {\n  configs: TTimerConfig\n  registers: TTimerRegisters\n  timerNr: number\n}\nexport enum PanelModes {\n  Normal = 'Normal',\n  Internal = 'With Internals',\n  ByDependencies = 'By Dependencies'\n}\nexport enum MicroControllers {\n  LGT8F328P = 'LGT8F328P',\n  ATMEGA328P = 'ATMEGA328P'\n}\n","import lgt328p from './lgt328p'\nimport atmega328p from './atmega328p'\nimport { MicroControllers } from '../helpers/types'\n// Timer tables: https://docs.google.com/spreadsheets/d/1VDKsVMj4c5aOxKWu2UroWFAeODwbeVwksYxhjtuEopI/edit#gid=1264839381\nconst timers = {\n  [MicroControllers.LGT8F328P]: lgt328p,\n  [MicroControllers.ATMEGA328P]: atmega328p\n}\n\nexport default timers\n","import {\n  atom,\n  atomFamily,\n  DefaultValue,\n  selector,\n  selectorFamily,\n  useSetRecoilState\n} from 'recoil'\nimport { setHashFromObject, setHashParam, useHashParams } from './useHash'\n\nimport timers from '../data'\nimport { useEffect, useRef } from 'react'\nimport { MicroControllers, PanelModes } from '../helpers/types'\n\nexport const panelModeState = atom({\n  key: 'PanelModeState',\n  default: PanelModes.Normal\n})\n\nexport function usePrevious<T>(value: T) {\n  const ref = useRef<T>()\n  useEffect(() => {\n    ref.current = value\n  })\n  return ref.current\n}\nconst defaultState = { mcu: MicroControllers.ATMEGA328P, timer: '0' }\nexport const RegisterLocationStateChange = () => {\n  const params = useHashParams()\n  const prev = usePrevious(params)\n  const withNulls: Record<string, string | undefined> = { ...defaultState }\n  for (const key in { ...params, ...prev }) {\n    withNulls[key] = params[key]\n  }\n  useSetRecoilState(userConfigBulkState)(withNulls)\n  return <></>\n}\nexport const RegisterLocationState = () => {\n  return (\n    <>\n      <RegisterLocationStateChange />\n    </>\n  )\n}\nconst userConfigState_internal = atomFamily<string | undefined, string>({\n  key: 'userConfigState_internal',\n  default: (param) => undefined\n})\nconst userConfigBulkState = selector<Record<string, string | undefined>>({\n  key: 'userConfigBulkState',\n  get: ({ get }) => {\n    throw new Error('Dont use')\n  },\n  set: ({ set }, obj) => {\n    if (obj instanceof DefaultValue) return\n    for (const key in obj) {\n      set(userConfigState_internal(key), obj[key])\n    }\n    setHashFromObject(obj)\n  }\n})\n\nexport const userConfigState = selectorFamily<string | undefined, string>({\n  key: 'userConfigState',\n  get:\n    (variable: string) =>\n    ({ get }) =>\n      get(userConfigState_internal(variable)),\n  set:\n    (variable: string) =>\n    ({ get, set }, value) => {\n      if (value instanceof DefaultValue) value = undefined\n      const current = get(userConfigState_internal(variable))\n      if (current !== value) {\n        set(userConfigState_internal(variable), value)\n        setHashParam(variable, value)\n      }\n    }\n})\n\nexport const mcuTimers = selector({\n  key: 'mcuTimers',\n  get: ({ get }) => {\n    const micro = get(userConfigState('mcu')) as MicroControllers\n    return timers[micro]\n  }\n})\nexport const timerState = selector({\n  key: 'timerState',\n  get: ({ get }) => get(mcuTimers)[+(get(userConfigState('timer')) || 0)]\n})\n","import { TTable } from './types'\n\nimport uniq from 'lodash/uniq'\nimport intersection from 'lodash/intersection'\nimport { remove } from 'lodash'\n\nexport const splitTables = ([left, ...tables]: TTable[]): TTable[][] => {\n  if (!left) return []\n  const cluster = [left]\n  let remaining: TTable[] = []\n  let colsLeft = Object.keys(left[0])\n  let changed\n  do {\n    changed = false\n    remaining = []\n\n    for (const table of tables) {\n      const colsRight = Object.keys(table[0])\n      const match = intersection(colsLeft, colsRight).length > 0\n      if (match) {\n        cluster.push(table)\n        colsLeft = uniq([...colsLeft, ...colsRight])\n        changed = true\n      } else {\n        remaining.push(table)\n      }\n    }\n    tables = remaining\n  } while (changed)\n\n  return [cluster, ...splitTables(remaining)]\n}\nexport function isTruthy<TValue>(value: TValue | undefined): value is TValue {\n  return !!value\n}\n\nexport const WILDCARD = '*'\nexport const getFullDomains = (tables: TTable[]): Record<string, string[]> => {\n  const domains: Record<string, string[]> = {}\n  for (const table of tables) {\n    for (const row of table) {\n      for (const [variable, value] of Object.entries(row)) {\n        domains[variable] = domains[variable] || []\n        if (value !== WILDCARD && !value.startsWith('!')) {\n          if (!domains[variable].includes(value)) domains[variable].push(value)\n        }\n      }\n    }\n  }\n  return domains\n}\nexport const getConstrainedDomains = (\n  tables: TTable[],\n  domains_?: Record<string, string[]>\n): Record<string, string[]> => {\n  const domains: Record<string, string[]> = domains_\n    ? { ...domains_ }\n    : getFullDomains(tables)\n  let done = false\n  while (!done) {\n    done = true\n    for (const table_ of tables) {\n      // first remove all rows containing a value out of a variable's domain\n      const table = table_.filter((row) => {\n        return Object.entries(row).every(([variable, value]) => {\n          if (value === WILDCARD) return true\n          if (value.startsWith('!')) {\n            const negated = value.slice(1)\n            return domains[variable].some((value) => value !== negated)\n          }\n          return domains[variable].includes(value)\n        })\n      })\n      // then update the domain of each variable to only the values avalable in the current table\n      for (const variable of Object.keys(table[0] || {})) {\n        // todo handle numerics\n        const values = table.map((row) => row[variable])\n        const hasWildcards = values.includes(WILDCARD)\n        if (hasWildcards) continue\n        const negatedVals = remove(values, (val) => val?.startsWith('!')).map(\n          (val) => val?.slice(1)\n        )\n        const positiveVals = values // there are no wildcards, and negateds were already removed\n        const miniDomain = uniq([\n          ...positiveVals,\n          ...negatedVals.flatMap((negated) =>\n            domains[variable].filter((value) => value !== negated)\n          )\n        ])\n        const sizeBefore = domains[variable].length\n        domains[variable] = intersection(domains[variable], miniDomain)\n        const sizeAfter = domains[variable].length\n        if (sizeBefore !== sizeAfter) done = false\n      }\n    }\n  }\n  return domains\n}\n","import { mapValues, uniq } from 'lodash'\nimport { selector, selectorFamily } from 'recoil'\nimport {\n  getConstrainedDomains,\n  splitTables,\n  getFullDomains\n} from '../helpers/helpers'\nimport { TRow, TTable } from '../helpers/types'\nimport { timerState, userConfigState } from '../state/state'\n\nexport const groupsState = selector({\n  key: 'groupsState',\n  get: ({ get }) => splitTables(get(timerState).configs)\n})\nexport const groupState = selectorFamily({\n  key: 'groupsState',\n  get:\n    (groupIdx: number) =>\n    ({ get }) => {\n      const tableSets = get(groupsState)\n      return tableSets[groupIdx]\n    }\n})\n\nconst getVariables = (group: TTable[]) => {\n  if (group === undefined) debugger\n  return uniq(group.flatMap((table: TTable) => Object.keys(table[0])))\n}\nexport const suggestedGroupAssignmentState = selectorFamily({\n  key: 'suggestedGroupAssignmentState',\n  get:\n    (groupIdx: number) =>\n    ({ get }) => {\n      const userState = get(groupConfigState(groupIdx))\n      const group = get(groupState(groupIdx))\n      let domains = get(constrainedGroupDomainsState(groupIdx))\n      const instantiations: Record<string, string> = {}\n      for (const variable of Object.keys(domains)) {\n        if (domains[variable].length < 2) continue // if the domain of a var is only one element, there's no need to assign it.\n        instantiations[variable] = domains[variable][0]\n        domains = getConstrainedDomains(\n          [[instantiations], [userState], ...group],\n          domains\n        )\n      }\n      return mapValues(domains, (domain) => domain[0])\n    }\n})\n\nexport const suggestedVariableAssignmentState = selectorFamily({\n  key: 'suggestedVarAssignmentState',\n  get:\n    (variable: string) =>\n    ({ get }) => {\n      const groupIdx = get(groupIdxFromVariableState(variable))\n      if (groupIdx === -1) return undefined\n\n      return get(suggestedGroupAssignmentState(groupIdx))[variable]\n    }\n})\nexport const suggestedAssignmentState = selector<TRow>({\n  key: 'suggestedAssignmentState',\n  get: ({ get }) => {\n    const assignments = get(groupsState)\n      .map((_, i) => get(suggestedGroupAssignmentState(i)))\n      .flat()\n    return Object.assign({}, ...assignments)\n  }\n})\n\nexport const groupConfigState = selectorFamily({\n  key: 'groupConfigState',\n  get:\n    (groupIdx: number) =>\n    ({ get }) => {\n      const group = get(groupState(groupIdx))\n      const relevantVariables = getVariables(group)\n      const userConfig: TRow = {}\n      for (const variable of relevantVariables) {\n        const userValue = get(userConfigState(variable))\n        if (userValue !== undefined) userConfig[variable] = userValue\n      }\n      return userConfig\n    }\n})\n\nexport const groupIdxFromVariableState = selectorFamily({\n  key: 'groupIdxFromVariableState',\n  get:\n    (variable: string) =>\n    ({ get }) => {\n      const tableSets = get(groupsState)\n      const idx = tableSets.findIndex((group) =>\n        group.some((table) => table[0].hasOwnProperty(variable))\n      )\n      return idx\n    }\n})\nexport const groupFromVariableState = selectorFamily({\n  key: 'groupFromVariableState',\n  get:\n    (variable: string) =>\n    ({ get }) => {\n      const tableSets = get(groupsState)\n      const idx = get(groupIdxFromVariableState(variable))\n      return tableSets[idx]\n    }\n})\nexport const constrainedGroupDomainsState = selectorFamily({\n  key: 'constrainedGroupDomainsState',\n  get:\n    (groupIdx: number) =>\n    ({ get }) => {\n      const group = get(groupState(groupIdx))\n      const userState = get(groupConfigState(groupIdx))\n      return getConstrainedDomains([[userState], ...group])\n    }\n})\nexport const fullGroupDomainsState = selectorFamily({\n  key: 'fullGroupDomainsState',\n  get:\n    (groupIdx: number) =>\n    ({ get }) => {\n      const group = get(groupState(groupIdx))\n      const userState = get(groupConfigState(groupIdx))\n      return getFullDomains([...group, [userState]])\n    }\n})\nexport const constrainedDomainState = selectorFamily({\n  key: 'constrainedDomainState',\n  get:\n    (variable: string) =>\n    ({ get }) => {\n      const groupIdx = get(groupIdxFromVariableState(variable))\n      return get(constrainedGroupDomainsState(groupIdx))[variable]\n    }\n})\nexport const fullDomainState = selectorFamily({\n  key: 'fullDomainState',\n  get:\n    (variable: string) =>\n    ({ get }) => {\n      const groupIdx = get(groupIdxFromVariableState(variable))\n      return get(fullGroupDomainsState(groupIdx))[variable]\n    }\n})\n\nexport const variableOptionsState = selectorFamily({\n  key: 'variableOptionsState',\n  get:\n    (variable: string) =>\n    ({ get }) => {\n      const groupIdx = get(groupIdxFromVariableState(variable))\n      const userState = get(groupConfigState(groupIdx))\n      const fullDomains = get(fullDomainState(variable))\n\n      const group = get(groupState(groupIdx))\n      let constrainedDomain = get(constrainedDomainState(variable))\n      if (userState[variable]) {\n        const { [variable]: _discarded, ...selectedWithout } = userState\n        constrainedDomain = getConstrainedDomains([\n          [selectedWithout],\n          ...group\n        ])[variable]\n      }\n      const defaultValue = get(suggestedVariableAssignmentState(variable))\n      const forcedOption =\n        !userState[variable] && constrainedDomain.length === 1\n          ? constrainedDomain[0]\n          : undefined\n      const suggestedOption =\n        !userState[variable] && constrainedDomain.length > 1\n          ? defaultValue\n          : undefined\n      return {\n        variable,\n        selectedOption: userState[variable],\n        suggestedOption: suggestedOption || forcedOption || userState[variable],\n        forcedOption: forcedOption,\n        options: fullDomains.map((value) => ({\n          isSuggested: value === suggestedOption,\n          value,\n          isDisabled: !constrainedDomain.includes(value) || !!forcedOption\n        }))\n      }\n    }\n})\n\nexport type TCheckboxGroupData = {\n  variable: string\n  selectedOption: string | undefined\n  suggestedOption: string | undefined\n  forcedOption: string | undefined\n  options: {\n    isSuggested: boolean\n    value: string\n    isDisabled: boolean\n  }[]\n}[]\nexport type TCheckboxMinimalGroupData = {\n  variable: string\n  options: {\n    value: string\n  }[]\n}[]\n","import { useEffect, useRef } from 'react'\nimport useSize from '@react-hook/size'\nimport { Tag } from 'rsuite'\n\nimport XAxis from './XAxis'\nimport YAxis from './YAxis'\nimport { scaleLinear, extent, curveStepAfter } from 'd3'\nimport { margin } from './margin'\nimport simTimer from '../helpers/simulator'\n\nimport './Plot.css'\nimport CompareRegisterHandle, {\n  CompareRegisterHandleRef\n} from './CompareRegisterHandle'\nimport InterruptArrow from './InterruptArrow'\nimport { Curve } from './Curve'\nimport {\n  getAllCompareRegTraits,\n  getCompareRegTraits\n} from '../helpers/compareRegisterUtil'\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil'\nimport { usePrevious, userConfigState } from '../state/state'\nimport { suggestedAssignmentState } from '../Panes/state'\n\ntype Props = {\n  style: Object\n}\nexport default function Plot({ style }: Props) {\n  const values = useRecoilValue(suggestedAssignmentState)\n  const counterMax = parseInt(values.counterMax)\n  const param = {\n    timerNr: values.timerNr,\n    timerMode: values.timerMode as any,\n    prescaler:\n      values.clockPrescalerOrSource === 'disconnect'\n        ? NaN\n        : parseInt(values.clockPrescalerOrSource) ||\n          parseInt(values.FCPU) / 1000,\n    cpuHz:\n      parseInt(values.FCPU || '1') * (values.clockDoubler === 'on' ? 2 : 1),\n    top: 0,\n    counterMax: parseInt(values.counterMax),\n    tovTime: values.setTovMoment as any,\n    OCRnXs: [] as number[],\n    OCRnXs_behaviour: [\n      values.CompareOutputModeA as any,\n      values.CompareOutputModeB as any,\n      values.CompareOutputModeC as any\n    ],\n    ICRn: 0,\n    deadTimeEnable: values.DeadTime === 'on',\n    deadTimeA: getCompareRegTraits('DeadTimeA', values).value,\n    deadTimeB: getCompareRegTraits('DeadTimeB', values).value\n  }\n\n  const IOCR_states = getAllCompareRegTraits(values).map((traits, i) => ({\n    ...traits,\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    ref: useRef<CompareRegisterHandleRef>(null),\n    i\n  }))\n\n  param.OCRnXs = IOCR_states.filter(({ isOutput }) => isOutput).map(\n    ({ value }) => value\n  )\n\n  param.ICRn = IOCR_states.find(({ isInput }) => isInput)!.value\n\n  param.top =\n    IOCR_states.find(({ isTop }) => isTop)?.value ?? parseInt(values.topValue)\n  const ocrMax = parseInt(values.topValue) || counterMax\n\n  /* TODO: put somewhere else */\n  /* DEFAULTS FOR COMPARE REGISTERS */\n  {\n    const prev = usePrevious(IOCR_states)\n    const ioCount = IOCR_states.filter(\n      ({ isDeadTime, isUsed }) => !isDeadTime && isUsed\n    ).length\n    IOCR_states.forEach((iocr, i) => {\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      const [regVal, setReg] = useRecoilState(userConfigState(iocr.name))\n      const top = param.top || Number.parseInt(values.counterMax)\n      if (prev && !prev[i].isUsed && iocr.isUsed) {\n        const n = iocr.isDeadTime\n          ? Math.pow(counterMax, 0.3)\n          : (top / (ioCount + 1)) * (i + 1)\n        setReg('' + Math.round(n))\n      }\n      if (regVal !== undefined && prev?.[i].isUsed && !iocr.isUsed) {\n        setReg(undefined)\n      }\n    })\n  }\n  /* --- */\n  const simulation = simTimer(param)\n  const containerRef = useRef<HTMLDivElement>(null)\n  const [width, height_] = useSize(containerRef)\n  const height_ouputCompare = 30\n  const margin_ouputCompare = 10\n  const activeOCnXs = IOCR_states.filter(({ isActiveOutput }) => isActiveOutput)\n  const height_timer =\n    height_ - height_ouputCompare * (activeOCnXs.length + 0.5)\n  const xScale = scaleLinear()\n    .domain(extent(simulation.t) as [number, number])\n    .range([margin.left, width - margin.right])\n  const yScale = scaleLinear()\n    .domain([0, ocrMax])\n    .rangeRound([height_timer - margin.bottom, margin.top])\n\n  useEffect(() => {\n    const containerEl = containerRef.current\n\n    const handleMouseUp = (e: Event) => {\n      IOCR_states.forEach(({ ref }) => ref.current?.onMouseUp(undefined as any))\n    }\n    const handleMouseMove = (e: MouseEvent | TouchEvent) => {\n      if (!containerEl) return\n      let y = e instanceof MouseEvent ? e.clientY : e.targetTouches[0].clientY\n      const targetY = containerEl.getBoundingClientRect().y\n      const offsetY = y - targetY\n      IOCR_states.forEach(({ ref }) => ref.current?.onMouseMove(offsetY, e))\n    }\n    document.addEventListener('mouseup', handleMouseUp)\n    document.addEventListener('touchend', handleMouseUp)\n    containerEl?.addEventListener('mousemove', handleMouseMove, {\n      passive: false\n    })\n    containerEl?.addEventListener('touchmove', handleMouseMove, {\n      passive: false\n    })\n    return () => {\n      document.removeEventListener('mouseup', handleMouseUp)\n      document.removeEventListener('touchend', handleMouseUp)\n      containerEl?.removeEventListener('mousemove', handleMouseMove)\n      containerEl?.removeEventListener('touchmove', handleMouseMove)\n    }\n  }, [IOCR_states])\n  return (\n    <div className=\"plotContainer\" ref={containerRef} style={style}>\n      <Tag className=\"frequency\">\n        Freq: {Math.round(simulation.freq * 100) / 100}Hz\n      </Tag>\n      <svg className=\"plot\">\n        <XAxis {...{ xScale, height: height_timer, data: simulation }} />\n        <YAxis {...{ yScale, width }} />\n        <Curve\n          {...{\n            xScale,\n            yScale,\n            width,\n            height: height_timer,\n            data: simulation.t.map((t, i) => [t, simulation.TCNT[i]]),\n            idx: 'TCNT',\n            key: 'TCNT'\n          }}\n        />\n        {activeOCnXs.map(({ isActiveOutput, i }, k) => {\n          const yScale = scaleLinear()\n            .domain([0, 1])\n            .rangeRound([\n              height_timer + height_ouputCompare * (k + 1),\n              height_timer + height_ouputCompare * k + margin_ouputCompare\n            ])\n          return (\n            <>\n              {isActiveOutput && (\n                <Curve\n                  {...{\n                    key: 'OC' + i,\n                    idx: i,\n                    curve: curveStepAfter,\n                    name: 'OC' + param.timerNr + 'ABC'[i],\n                    xScale,\n                    yScale,\n                    data: simulation.t.map((t, j) => [\n                      t,\n                      simulation.OCnXs[i][j]\n                    ])\n                  }}\n                />\n              )}\n              {param.deadTimeEnable && i < 2 && (\n                <Curve\n                  {...{\n                    key: 'DeadTime-' + i,\n                    idx: 'DeadTime-' + i,\n                    curve: curveStepAfter,\n                    name: '',\n                    xScale,\n                    yScale,\n                    data: [\n                      [0, 0],\n                      ...simulation.t.map((t, j) => [\n                        t,\n                        simulation.deadTimes[i][j]\n                      ]),\n                      [simulation.t[simulation.t.length - 1], 0]\n                    ] as [number, number][]\n                  }}\n                />\n              )}\n            </>\n          )\n        })}\n\n        {simulation.MATCH_Xs.flatMap(\n          (matches, i) =>\n            IOCR_states[i].isInterrupt && (\n              <InterruptArrow\n                {...{\n                  key: i + 'interrupt',\n                  flagValues: matches,\n                  TCNT: simulation.TCNT,\n                  t: simulation.t,\n                  xScale,\n                  yScale,\n                  label: 'OCR' + values.timerNr + 'ABC'[i] + ' interrupt'\n                }}\n              />\n            )\n        )}\n        {IOCR_states.find(({ isInput }) => isInput)!.isInterrupt && (\n          <InterruptArrow\n            {...{\n              flagValues: simulation.CAPT,\n              TCNT: simulation.TCNT,\n              t: simulation.t,\n              xScale,\n              yScale,\n              label: 'Capture interrupt',\n              key: 'Capture interrupt'\n            }}\n          />\n        )}\n        {values.InterruptOnTimerOverflow === 'on' && (\n          <InterruptArrow\n            {...{\n              flagValues: simulation.OVF,\n              TCNT: simulation.TCNT,\n              t: simulation.t,\n              xScale,\n              yScale,\n              label: 'Overflow interrupt',\n              key: 'Overflow interrupt'\n            }}\n          />\n        )}\n\n        {IOCR_states.map(({ isUsed, ref, value, name }) => {\n          // eslint-disable-next-line react-hooks/rules-of-hooks\n          const setUserConfigValue = useSetRecoilState(userConfigState(name))\n\n          // TODO: redo the extent thing with DTRs\n          const yExtent2: [number, number] = name.startsWith('DTR')\n            ? [0, Math.sqrt(counterMax + 1) - 1]\n            : [0, ocrMax]\n          const yScale = scaleLinear()\n            .domain(yExtent2)\n            .rangeRound([height_timer - margin.bottom, margin.top])\n          return (\n            isUsed && (\n              <CompareRegisterHandle\n                {...{\n                  key: name,\n                  ref,\n                  width,\n                  yExtent: yExtent2,\n                  yScale,\n                  compareRegisterValue: value,\n                  setCompareRegisterValue: (val: number) =>\n                    // eslint-disable-next-line react-hooks/rules-of-hooks\n                    setUserConfigValue(val + ''),\n                  name\n                }}\n              />\n            )\n          )\n        })}\n      </svg>\n    </div>\n  )\n}\n","import { map } from 'lodash'\nimport { useRecoilValue } from 'recoil'\nimport { getAllCompareRegTraits } from '../helpers/compareRegisterUtil'\nimport { isTruthy } from '../helpers/helpers'\nimport { timerState } from '../state/state'\nimport {\n  suggestedAssignmentState,\n  suggestedVariableAssignmentState\n} from './state'\nimport { Button } from 'rsuite'\nimport copy from 'copy-to-clipboard'\nimport React, { useEffect, useRef, useState } from 'react'\nconst omitRegisterZeros = true\n\nfunction LinkToThisPage() {\n  const [url, setUrl] = useState(window.location.href)\n  useEffect(() => {\n    const handleUrlChange = () => {\n      setUrl(window.location.href)\n    }\n    window.addEventListener('hashchange', handleUrlChange)\n    return () => window.removeEventListener('hashchange', handleUrlChange)\n  }, [])\n  return <>{'/* ' + url + ' */\\n'}</>\n}\nexport default function Code() {\n  const codeContainerRef = useRef<HTMLPreElement>(null)\n  return (\n    <>\n      <CopyToClipboard codeContainerRef={codeContainerRef} />\n      <pre style={{ margin: 0 }} ref={codeContainerRef}>\n        {`\\\nvoid setup(){\n  `}\n        <LinkToThisPage />\n        {`  noInterrupts();\\n`}\n        <TimerConfgCode />\n        <CompareRegsCode />\n        {`  interrupts();\n}\n`}\n        <Interrupts />\n      </pre>\n    </>\n  )\n}\nconst TimerConfgCode = () => {\n  const omitZeroValues = true\n  const { registers } = useRecoilValue(timerState)\n  const code = map(registers, (variables, regName) => {\n    const assignments = variables\n      .map((variable) => {\n        const value =\n          // eslint-disable-next-line react-hooks/rules-of-hooks\n          useRecoilValue(suggestedVariableAssignmentState(variable)) || '0'\n        if (omitZeroValues && value === '0') return ''\n        return `${value} << ${variable}`\n      })\n      .filter(isTruthy)\n    const assignmentsStr = assignments.length\n      ? `\\n    ${assignments.join(' |\\n    ')}`\n      : '0'\n    if (omitRegisterZeros && assignmentsStr === '0') return ''\n    // register names like PMX0_0 and PMX0_1 are actually all the same register,\n    // but they have to be set in two steps\n    return `  ${regName.split('_')[0]} = ${assignmentsStr};`\n  })\n    .flat()\n    .filter(isTruthy)\n  let str = code.join('\\n')\n  if (str.length) str += '\\n'\n  return <>{str}</>\n}\nfunction CompareRegsCode() {\n  const suggestedConfig = useRecoilValue(suggestedAssignmentState)\n\n  const code = getAllCompareRegTraits(suggestedConfig)\n    .filter(({ isUsed }) => isUsed)\n    .map(({ code }) => code)\n  let str = code.join('\\n  ')\n  if (str.length) str = '  ' + str + '\\n'\n  return <>{str}</>\n}\nfunction Interrupts() {\n  const interruptVariables = [\n    'interruptVectorCodeA',\n    'interruptVectorCodeB',\n    'interruptVectorCodeC',\n    'interruptVectorCodeOVF',\n    'interruptVectorCaptureCode'\n  ]\n  const interruptCommonSignature = useRecoilValue(\n    suggestedVariableAssignmentState('InterruptCommonSignature')\n  )\n  let code = interruptVariables\n    .map(\n      (variable) =>\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        useRecoilValue(suggestedVariableAssignmentState(variable)) || '//nocode'\n    )\n    .filter((value) => value !== '//nocode')\n\n  if (code.length && interruptCommonSignature) {\n    code = [\n      interruptCommonSignature + ' {',\n      ...code.map((code) => '    ' + code.split('\\n').join('\\n    ')),\n      '}'\n    ]\n  }\n  let str = code.join('\\n')\n  if (str.length) str += '\\n'\n  return <>{str}</>\n}\n\nconst CopyToClipboard = React.memo(\n  ({\n    codeContainerRef\n  }: {\n    codeContainerRef: React.RefObject<HTMLPreElement>\n  }) => {\n    // using refs to avoid rerenders\n    const [clicked, setClicked] = useState(false)\n    useEffect(() => {\n      setTimeout(() => setClicked(false), 600)\n    }, [clicked])\n    return (\n      <div>\n        <Button\n          color={clicked ? 'green' : undefined}\n          onClick={() => {\n            copy(codeContainerRef.current?.textContent || '')\n            setClicked(true)\n            console.log(codeContainerRef.current?.textContent || '')\n          }}\n        >\n          {clicked ? 'Copied' : 'Copy'}\n        </Button>\n      </div>\n    )\n  }\n)\n","import {\n  Checkbox,\n  CheckboxGroup,\n  FlexboxGrid,\n  Icon,\n  Panel,\n  Tooltip,\n  Whisper\n} from 'rsuite'\nimport { useRecoilValue, useSetRecoilState } from 'recoil'\nimport { variableDescriptions, valueDescriptions } from '../data/timers'\nimport { difference, map, uniq } from 'lodash'\nimport './TimerSetup.css'\n\nimport Plot from '../Plot/Plot'\nimport Code from './Code'\nimport ResizePanel from 'react-resize-panel-ts'\nimport { panelModeState, userConfigState } from '../state/state'\nimport { variableOptionsState, groupsState } from './state'\nimport { TTable, PanelModes } from '../helpers/types'\nconst VariableConfig = ({\n  variable,\n  humanName\n}: {\n  variable: string\n  humanName?: string\n}) => {\n  const setUserConfigValue = useSetRecoilState(userConfigState(variable))\n  const { selectedOption, forcedOption, options } = useRecoilValue(\n    variableOptionsState(variable)\n  )\n  const descr = valueDescriptions[variable]\n  const descrTitle = descr?.title\n  return (\n    <CheckboxGroup\n      inline\n      value={[selectedOption || forcedOption]}\n      onChange={(val: string[]) => setUserConfigValue(val[1])}\n    >\n      <p>\n        {humanName || variable}{' '}\n        {descrTitle && (\n          <Whisper\n            placement=\"right\"\n            trigger=\"hover\"\n            speaker={<Tooltip>{descrTitle}</Tooltip>}\n          >\n            <Icon\n              icon=\"info-circle\"\n              style={{ color: 'lightgrey', fontSize: 12 }}\n            />\n          </Whisper>\n        )}\n      </p>\n      {options.map(({ value, isSuggested, isDisabled }, i) => {\n        const valueDescription = descr?.[value]\n\n        return (\n          <span key={i}>\n            <Checkbox\n              indeterminate={isSuggested}\n              value={value}\n              disabled={isDisabled}\n            >\n              {value}\n            </Checkbox>{' '}\n            {valueDescription && (\n              <Whisper\n                placement=\"right\"\n                trigger=\"hover\"\n                speaker={<Tooltip>{valueDescription}</Tooltip>}\n              >\n                <Icon\n                  icon=\"info-circle\"\n                  style={{ color: 'lightgrey', fontSize: 12 }}\n                />\n              </Whisper>\n            )}\n          </span>\n        )\n      })}\n    </CheckboxGroup>\n  )\n}\n\ntype TPanel = {\n  panelName: string\n  namedVariables: {\n    variable: string\n    humanName?: string\n  }[]\n}\nconst getPanesByGroup = (groups: TTable[][]): TPanel[] =>\n  groups.map((group, i) => ({\n    panelName: `Group ${i}`,\n    namedVariables: group\n      .map((table) => Object.keys(table[0]))\n      .flat()\n      .map((variable) => ({ variable }))\n  }))\n\nconst getAllVariablesInGroups = (groups: TTable[][]) =>\n  uniq(\n    groups\n      .flat()\n      .map((table) => Object.keys(table[0]))\n      .flat()\n  )\nconst getPanesGroupedByDescription = (groups: TTable[][]): TPanel[] => {\n  const allVariablesInGroups = getAllVariablesInGroups(groups)\n  return map(variableDescriptions, (variableDescription, panelName) => ({\n    panelName,\n    namedVariables: map(variableDescription, (humanName, variable) => ({\n      variable,\n      humanName\n    })).filter(({ variable }) => allVariablesInGroups.includes(variable))\n  })).filter(({ namedVariables }) => namedVariables.length)\n}\nconst getHiddenPane = (groups: TTable[][]): TPanel => {\n  const allVariables = getAllVariablesInGroups(groups)\n\n  const visibleVariables: string[] = Object.values(variableDescriptions)\n    .map(Object.values)\n    .flat()\n  return {\n    panelName: 'Internals',\n    namedVariables: difference(allVariables, visibleVariables).map(\n      (variable) => ({\n        variable\n      })\n    )\n  }\n}\n\nfunction TimerSetup() {\n  const groups = useRecoilValue(groupsState)\n\n  const panelMode = useRecoilValue(panelModeState)\n  let panels: TPanel[]\n  switch (panelMode) {\n    case PanelModes.Normal:\n      panels = getPanesGroupedByDescription(groups)\n      break\n    case PanelModes.Internal:\n      panels = [getHiddenPane(groups), ...getPanesGroupedByDescription(groups)]\n      break\n    case PanelModes.ByDependencies:\n      panels = getPanesByGroup(groups)\n      break\n  }\n  const style = { width: 100 / (panels.length + 1) + '%' }\n\n  const r = (\n    <div className=\"TimerSetup\">\n      <FlexboxGrid style={{ flexGrow: 1, overflow: 'scroll' }}>\n        {panels.map(({ panelName, namedVariables }, i) => (\n          <FlexboxGrid.Item key={panelName} style={style}>\n            <Panel header={panelName} bordered shaded defaultExpanded>\n              {namedVariables.map(({ variable, humanName }, i) => (\n                <VariableConfig\n                  key={i}\n                  variable={variable}\n                  humanName={humanName}\n                />\n              ))}\n            </Panel>\n          </FlexboxGrid.Item>\n        ))}\n        <FlexboxGrid.Item key=\"code\" style={style}>\n          <Panel header=\"Code\" bordered shaded defaultExpanded>\n            <Code />\n          </Panel>\n        </FlexboxGrid.Item>\n      </FlexboxGrid>\n      <ResizePanel\n        direction=\"n\"\n        style={{\n          width: '100%',\n          bottom: 0,\n          flexGrow: 0,\n          borderTop: '1px solid lightgrey',\n          height: 200,\n          touchAction: 'none'\n        }}\n      >\n        <Plot style={{ minHeight: 300 }} />\n      </ResizePanel>\n    </div>\n  )\n  return r\n}\n\nexport default TimerSetup\n","import { map } from 'lodash'\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport { Container, Content, Header, Icon, Nav, Navbar, Dropdown } from 'rsuite'\nimport 'rsuite/dist/styles/rsuite-default.css'\n\nimport './App.css'\nimport TimerSetup from './Panes/TimerSetup'\nimport { PanelModes, MicroControllers } from './helpers/types'\nimport {\n  panelModeState,\n  RegisterLocationState,\n  mcuTimers,\n  userConfigState\n} from './state/state'\nimport { setHashFromObject } from './state/useHash'\nconst gh = 'https://github.com/dbuezas/arduino-web-timers'\nconst App = () => {\n  const timerIdx = useRecoilValue(userConfigState('timer'))\n  const mcu = useRecoilValue(userConfigState('mcu'))\n  const timers = useRecoilValue(mcuTimers)\n  const [panelMode, setPanelMode] = useRecoilState(panelModeState)\n  const isLoading = mcuTimers === undefined || timerIdx === undefined\n  return (\n    <>\n      <link\n        rel=\"stylesheet\"\n        href=\"https://cdnjs.cloudflare.com/ajax/libs/github-fork-ribbon-css/0.2.3/gh-fork-ribbon.min.css\"\n      />\n      <div>\n        <RegisterLocationState />\n        {!isLoading && (\n          <Container className=\"App\">\n            <Header>\n              <Navbar appearance=\"inverse\">\n                <Navbar.Header>\n                  &nbsp;\n                  <span>\n                    <img\n                      src=\"./logo.png\"\n                      alt=\"logo\"\n                      style={{ width: 55.5, height: 55.5, float: 'left' }}\n                    />\n                    &nbsp;\n                    <span\n                      style={{\n                        float: 'left',\n                        marginTop: 7,\n                        textAlign: 'center'\n                      }}\n                    >\n                      ARDUINO WEB\n                      <br />\n                      TIMERS\n                    </span>\n                  </span>\n                </Navbar.Header>\n                <Navbar.Body>\n                  <Nav>\n                    <Dropdown\n                      trigger=\"click\"\n                      icon={<Icon icon=\"microchip\" />}\n                      title={mcu}\n                      placement=\"bottomEnd\"\n                    >\n                      {map(MicroControllers, (aChip) => (\n                        <Dropdown.Item\n                          // active={aChip === mcu}\n                          onSelect={(mcu) =>\n                            setHashFromObject({\n                              mcu,\n                              timer: '0'\n                            })\n                          }\n                          eventKey={aChip}\n                          key={aChip}\n                        >\n                          {aChip}\n                        </Dropdown.Item>\n                      ))}\n                    </Dropdown>\n                  </Nav>\n                  <Nav\n                    activeKey={timerIdx}\n                    onSelect={(timer) =>\n                      setHashFromObject({\n                        mcu,\n                        timer\n                      })\n                    }\n                  >\n                    {timers.map((_: any, i) => (\n                      <Nav.Item\n                        eventKey={'' + i}\n                        key={'' + i}\n                        icon={\n                          <>\n                            <Icon icon=\"line-chart\" />\n                          </>\n                        }\n                      >\n                        Timer {i}\n                      </Nav.Item>\n                    ))}\n                  </Nav>\n                  <Nav pullRight>\n                    <Dropdown\n                      trigger=\"click\"\n                      icon={<Icon icon=\"cog\" />}\n                      title={panelMode}\n                      placement=\"bottomEnd\"\n                    >\n                      {map(PanelModes, (mode) => (\n                        <Dropdown.Item\n                          // active={mode === panelMode}\n                          onSelect={setPanelMode}\n                          eventKey={mode}\n                          key={mode}\n                        >\n                          {mode}\n                        </Dropdown.Item>\n                      ))}\n                    </Dropdown>\n                    <Dropdown\n                      trigger=\"click\"\n                      icon={<Icon icon=\"help-o\" />}\n                      title=\"About\"\n                      placement=\"bottomEnd\"\n                    >\n                      <Dropdown.Item\n                        href={gh + '/discussions/categories/show-and-tell'}\n                        target=\"_blank\"\n                      >\n                        Share what you used this for!\n                      </Dropdown.Item>\n                      <Dropdown.Item\n                        href={gh + '/discussions/categories/q-a'}\n                        target=\"_blank\"\n                      >\n                        Q&A\n                      </Dropdown.Item>\n                      <Dropdown.Item\n                        href={gh + '/discussions/categories/ideas'}\n                        target=\"_blank\"\n                      >\n                        Propose a feature\n                      </Dropdown.Item>\n                      <Dropdown.Item\n                        href={gh + '/issues/new/choose'}\n                        target=\"_blank\"\n                      >\n                        Report a bug\n                      </Dropdown.Item>\n                    </Dropdown>\n                  </Nav>\n                  <iframe\n                    src=\"https://ghbtns.com/github-btn.html?user=dbuezas&repo=arduino-web-timers&type=star&count=true\"\n                    frameBorder=\"0\"\n                    scrolling=\"0\"\n                    width=\"100\"\n                    height=\"20\"\n                    title=\"GitHub\"\n                    style={{ marginTop: 18, float: 'right' }}\n                  ></iframe>\n                </Navbar.Body>\n              </Navbar>\n            </Header>\n            <Content\n              style={{\n                padding: 10,\n                // margin: 20,\n                background: '#fff',\n                position: 'relative'\n              }}\n            >\n              <TimerSetup key={timerIdx + '-' + mcu} />\n            </Content>\n          </Container>\n        )}\n      </div>\n      <a\n        className=\"github-fork-ribbon right-bottom fixed\"\n        href={gh}\n        data-ribbon=\"Fork me on GitHub\"\n        title=\"Fork me on GitHub\"\n      >\n        Fork me on GitHub\n      </a>\n    </>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { RecoilRoot } from 'recoil'\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}