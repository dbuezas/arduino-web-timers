{"version":3,"sources":["data/timers.ts","Plot/margin.ts","Plot/XAxis.tsx","Plot/YAxis.tsx","helpers/simulator.ts","Plot/CompareRegisterHandle.tsx","Plot/InterruptArrow.tsx","Plot/Curve.tsx","helpers/compareRegisterUtil.ts","helpers/types.ts","state/useHash.ts","data/lgt328p/index.ts","data/lgt328p/timer0.ts","data/lgt328p/timer1.ts","data/lgt328p/timer2.ts","data/lgt328p/timer3.ts","data/atmega328p/index.ts","data/atmega328p/timer0.ts","data/atmega328p/timer1.ts","data/atmega328p/timer2.ts","data/index.ts","state/state.tsx","helpers/helpers.ts","Panes/state.ts","Plot/Plot.tsx","Panes/Code.tsx","Panes/TimerSetup.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["tsv","str","table","trim","split","map","line","header","row","Object","fromEntries","colName","i","replace","filter","values","includes","tsvRegisters","rows","register","column","bitNameDescriptions","Timer","timerMode","topValue","clockPrescalerOrSource","clockDoubler","ExternalClockInput","CompareOutputModeA","interruptA","OCnA_OutputPort","OCnA_OutputCurrent","CompareOutputModeB","interruptB","OCnB_OutputPort","OCnB_OutputCurrent","CompareOutputModeC","interruptC","OCnC_OutputPort","OCnC_OutputCurrent","Extras","updateOcrMoment","setTovMoment","InterruptOnTimerOverflow","InputCaptureNoiseSupression","InterruptOnInputCapture","InputCaptureEdgeSelect","DeadTime","bitValueDescriptions","Normal","PCPWM","CTC","FPWM","PFCPWM","ICR1","ICR3","AC0P","B1","B3","C0","D3","D6","E4","F1","F5","F6","F7","F2","F4","B2","F3","D5","TOP","BOTTOM","immediate","title","on","margin","toFixed","float","digits","padding","Math","pow","round","XAxis","height","xScale","nodeRef","useRef","gEl","current","useLayoutEffect","xTicks","ticks","domain","select","call","g","attr","axisBottom","tickValues","tickPadding","tickSize","tickFormat","t","s","Number","isFinite","m","h","ms","us","ns","formatTime","tickSizeOuter","className","ref","YAxis","width","yScale","yTicks","axisLeft","v","_d","_","path","offsetCounter","counter","offset","top","cpuToTcnt","tcnt","dir","tcntToCpu","getTimerLength","cpu","matches","a","b","constrain","n","min","max","CompareRegisterHandle","forwardRef","setCompareRegisterValue","compareRegisterValue","yExtent","name","useState","draggingTV","setDraggingTV","useImperativeHandle","onMouseUp","onMouseMove","y","e","preventDefault","scaled","invert","scaledY","onMouseDown","useCallback","x1","x2","y1","y2","onTouchStart","fill","x","dy","dx","displayName","InterruptArrow","label","flagValues","TCNT","transform","d","Curve","data","idx","datum","theLine","undefined","PanelModes","MicroControllers","getName","genericName","bitValues","OutputA","timerNr","OutputB","OutputC","Input","DeadTimeA","DeadTimeB","getIsTop","getIsInterrupt","getPinName","getIsActiveOutput","getIsUsed","getIsActiveDeadTime","getIsInput","getIsOutput","getIsDeadTime","compareRegs","getCompareRegTraits","value","parseFloat","code","pinModeCode","pinName","isInput","isOutput","isDeadTime","isActiveOutput","isTop","isInterrupt","isUsed","getAllCompareRegTraits","getHashParams","hash","window","location","slice","URLSearchParams","setFullHash","pathname","setHashFromObject","record","cleanRecord","entries","hashParams","toString","timers","registers","configs","DTR0L","DTR0H","OCR0A","OCR0B","DTR1L","DTR1H","OCR1A","OCR1B","OCR2A","OCR2B","DTR3L","DTR3H","OCR3A","OCR3B","OCR3C","LGT8F328P","lgt328p","ATMEGA328P","atmega328p","panelModeState","atom","key","default","usePrevious","useEffect","defaultState","mcu","timer","RegisterLocationStateChange","params","setHashParams","handleHashChange","addEventListener","removeEventListener","useHashParams","prev","withNulls","useSetRecoilState","userConfigBitBulkState","RegisterLocationState","userConfigState_internal","atomFamily","param","selector","get","Error","set","obj","DefaultValue","userConfigBitState","selectorFamily","bitName","delete","setHashParam","mcuTimers","micro","timerState","splitTables","left","tables","changed","cluster","remaining","colsLeft","keys","colsRight","intersection","length","push","uniq","isTruthy","_joinTables","right","flatMap","leftRow","rightRow","every","rightVal","leftVal","negMatch","match","negA","negB","negatedMatch","joinTables","cleanTables","pickBy","groupsState","suggestedBitAssignmentState","groupIdx","groupIdxFromBitNameState","groupAssignmentsState","suggestedAssignmentState","assignments","flat","assign","groupConfigState","relevantBitNames","group","getBitNames","userConfig","userBitConfig","findIndex","some","hasOwnProperty","groupFromBitNameState","userState","allBitOptionsState","col","enabledBitOptionsState","enabledAssignments","selectedWithout","bitOptionsState","fullAssignments","allBitOptions","enabledOptions","forcedOption","suggestedOption","selectedOption","options","isSuggested","isDisabled","Plot","style","useRecoilValue","counterMax","parseInt","prescaler","cpuHz","FCPU","tovTime","OCRnXs","OCRnXs_behaviour","ICRn","deadTimeEnable","deadTimeA","deadTimeB","IOCR_states","traits","find","ocrMax","ioCount","forEach","iocr","setReg","sqrt","simulation","prescaledCPUEnd","results","OCnXs","MATCH_Xs","OVF","CAPT","deadTimes","freq","isNaN","actions","behaviour","action","at","matchAt","to","actionDeadTimeA","actionDeadTimeB","bClear","bSet","tcntEventTimes","prescaledCPU","nextEvents","distToNext","simTimer","containerRef","useSize","height_","activeOCnXs","height_timer","scaleLinear","extent","range","rangeRound","containerEl","handleMouseUp","handleMouseMove","offsetY","MouseEvent","clientY","targetTouches","getBoundingClientRect","document","passive","Tag","k","j","setUserConfigBit","yExtent2","startsWith","val","LinkToThisPage","href","url","setUrl","handleUrlChange","Code","codeContainerRef","CopyToClipboard","CompareRegsCode","Interrupts","PortDir","suggestedConfig","join","TimerConfgCode","bitNames","regName","bitAssignments","bitValue","bitAssignmentsStr","interruptCommonSignature","React","memo","clicked","setClicked","setTimeout","Button","color","onClick","copy","textContent","console","log","BitConfig","humanName","descr","descrTitle","CheckboxGroup","inline","onChange","Whisper","placement","trigger","speaker","Tooltip","Icon","icon","fontSize","bitValueDescr","Checkbox","indeterminate","disabled","getAllBitnamesInGroups","groups","getPanesGroupedByDescription","allBitnamesInGroups","bitDescriptions","panelName","getHiddenPane","allBitnames","visibleBitnames","difference","TimerSetup","panels","Internal","ByDependencies","getPanesByGroup","FlexboxGrid","flexGrow","overflow","Item","Panel","bordered","shaded","defaultExpanded","direction","bottom","borderTop","touchAction","minHeight","gh","App","timerIdx","useRecoilState","panelMode","setPanelMode","isLoading","rel","Container","Header","Navbar","appearance","src","alt","marginTop","textAlign","Body","Nav","Dropdown","aChip","onSelect","eventKey","activeKey","pullRight","mode","target","frameBorder","scrolling","Content","background","position","data-ribbon","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3be9df6a.chunk.js","sourcesContent":["export const tsv = (str: string) => {\n  const table = str\n    .trim()\n    .split('\\n')\n    .map((line) => line.split('\\t'))\n  const [header, ...rows] = table\n  return rows\n    .map((row) =>\n      Object.fromEntries(\n        header.map((colName, i) => [\n          colName,\n          (row[i] || '').trim().replace(/\\\\n/g, '\\n').replace(/\\\\t/g, '\\t')\n        ])\n      )\n    )\n    .filter((row) => !Object.values(row).includes('-'))\n}\n\nexport const tsvRegisters = (str: string) => {\n  const table = str\n    .trim()\n    .split('\\n')\n    .map((line) => line.split('\\t'))\n  const [header, ...rows] = table\n  return Object.fromEntries(\n    header.map((register, column) => [register, rows.map((row) => row[column])])\n  )\n}\n\nexport const bitNameDescriptions: Record<string, Record<string, string>> = {\n  Timer: {\n    timerMode: 'Timer mode',\n    topValue: 'Top value of timer',\n    clockPrescalerOrSource: 'Clock prescaler or external source',\n    clockDoubler: 'Double timer clock speed',\n    ExternalClockInput: 'External clock input port'\n  },\n  'Output A': {\n    CompareOutputModeA: 'Behaviour',\n    interruptA: 'Interrupt on match',\n    OCnA_OutputPort: 'Output port',\n    OCnA_OutputCurrent: 'Output current'\n  },\n  'Output B': {\n    CompareOutputModeB: 'Behaviour',\n    interruptB: 'Interrupt on match',\n    OCnB_OutputPort: 'Output port',\n    OCnB_OutputCurrent: 'Output current'\n  },\n  'Output C': {\n    CompareOutputModeC: 'Behaviour',\n    interruptC: 'Interrupt on match',\n    OCnC_OutputPort: 'Output port',\n    OCnC_OutputCurrent: 'Output current'\n  },\n  Extras: {\n    updateOcrMoment: 'When are the OCRs updated',\n    setTovMoment: 'When overflow interrupt is triggered',\n    InterruptOnTimerOverflow: 'Interrupt on Timer Overflow',\n    InputCaptureNoiseSupression: 'Input capture noise supression',\n    InterruptOnInputCapture: 'Interrupt on Input Capture',\n    InputCaptureEdgeSelect: 'Input Capture Edge Select',\n    DeadTime: 'Insert dead time'\n  }\n}\nexport const bitValueDescriptions: Record<string, Record<string, string>> = {\n  timerMode: {\n    Normal: 'Counts always up, overflowing to zero. Duty is always 50%.',\n    PCPWM:\n      'Phase correct PWM: Counts up to TOP then down to 0. Output compare registers updated at TOP, maintaining the phase of the PWM. Output is set in one direction and cleared on the other one. Duty goes from full 0% to full 100% but maximum frequency is half that of FPWM.',\n    CTC: 'Clear timer on compare: Counts up to TOP and resets to zero. Duty is always 50%.',\n    FPWM: 'Fast PWM: Counts up to TOP and resets to zero. Duty cycle cannot go to 0% (on clear-on-compare-match), or to 100% (on set-on-compare-match).',\n    PFCPWM:\n      'Phase frequency correct PWM: idem to PCPWM, but output compare registers are updated at zero, resulting in a constant frequency even when the output compare registers are changed during operation.'\n  },\n  topValue: {\n    ICR1: 'If ICR1 is not used as top, the input capture pin (ICP1) is PB0.\\nIf ICR1 is used as top, ICP1 is disconnected. The input compare register is not double-buffered so it will be updated immediatly (and not on TOP or BOTTOM like OCRs). This may make the timer lose a match if changed near it.',\n    ICR3: 'If ICR3 is not used as top, the input capture pin (ICP3) is PF4.\\nIf ICR3 is used as top, ICP3 is disconnected. The input compare register is not double-buffered so it will be updated immediatly (and not on TOP or BOTTOM like OCRs). This may make the timer lose a match if changed near it.'\n  },\n  OCnA_OutputPort: {\n    'E4+C0': 'Both at the same time',\n    AC0P: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t15 \\nQFP32:\tD6\t10 \\nSSOP20:\tD6\t9',\n    B1: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t19 \\nQFP32:\tD9\t13 \\nSSOP20:\tD9\t11',\n    B3: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t23 \\nQFP32:\tD11\t15 \\nSSOP20:\tD11\t12',\n    C0: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t35 \\nQFP32:\tA0\t25 \\nSSOP20:\tA0\t17',\n    D3: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t1 \\nQFP32:\tD3\t1 \\nSSOP20:\tD3\t3',\n    D6: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t14 \\nQFP32:\tD6\t10 \\nSSOP20:\tD6\t9',\n    E4: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t3 \\nQFP32:\t-\t3 \\nSSOP20:\t-\t-',\n    F1: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t46 \\nQFP32:\tD1\t31 \\nSSOP20:\tD1\t1',\n    F5: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t9 \\nQFP32:\t-\t6 \\nSSOP20:\tD?\t6',\n    F6: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t10 \\nQFP32:\t-\t- \\nSSOP20:\t-\t-',\n    F7: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t17 \\nQFP32:\t-\t- \\nSSOP20:\tD7\t10'\n  },\n  OCnB_OutputPort: {\n    F2: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t48 \\nQFP32:\tD2\t32 \\nSSOP20:\tD2\t2',\n    F7: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t17 \\nQFP32:\t-\t- \\nSSOP20:\tD7\t10',\n    D3: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t1 \\nQFP32:\tD3\t1 \\nSSOP20:\tD3\t3',\n    F4: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t5 \\nQFP32:\t-\t5 \\nSSOP20:\tD3\t3',\n    B2: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t20 \\nQFP32:\tD10\t14 \\nSSOP20:\tD10\t12',\n    F3: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t4 \\nQFP32:\t-\t- \\nSSOP20:\t-\t-',\n    D5: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t13 \\nQFP32:\tD5\t9 \\nSSOP20:\tD5\t8'\n  },\n  OCnC_OutputPort: {\n    F3: 'Package\tSilk\tIC\\n───────\t────\t──\\nQFP48:\tD?\t4 \\nQFP32:\t-\t- \\nSSOP20:\t-\t-'\n  },\n  updateOcrMoment: {\n    TOP: 'OCR registers are updated whenever the timer reaches its top. Can be a fixed number or the value of some register',\n    BOTTOM: 'OCR registers are updated when the timer resets to zero',\n    immediate:\n      'OCR registers are updated as soon as they are changed, without a buffer.'\n  },\n  InterruptOnInputCapture: {\n    title: `When ICRn not used as TOP and a capture is triggered (PB0 in Timer1, PF4 in Timer3), the counter value is copied into the input capture register (ICRn). The event will also set the input capture flag (ICFn), and this can be used to cause an input capture interrupt, if this interrupt is enabled. \\nIt can also be used to trigger an interrupt on compare match against the counter.`\n  },\n  InputCaptureNoiseSupression: {\n    on: `The noise canceler improves noise immunity by using a simple digital filtering scheme. The noise canceler input is monitored over four samples, and all four must be equal for changing the output that in turn is used by the edge detector.\n    When enabled, the noise canceler introduces additional four system clock cycles of delay from a change applied\n    to the input, to the update of the ICRn register. The noise canceler uses the system clock and is therefore not affected by the\n    prescaler.`\n  },\n  InputCaptureEdgeSelect: {\n    title: `When the ICRn is used as TOP value, the ICPn is disconnected and consequently the input capture function is disabled.`\n  },\n  DeadTime: {\n    on: `dead time enable control\n    Setting DTENn to logic one, inserting dead time is enable. Base on waveform generated in B channel compare output, both OCnA and OCnB can insert dead time, whose interval is decided by corresponding counter time of DTRn register. Waveform polarity output by OCnA is decided by relationship between CnMn and COMnB, for details referring to list for waveform polarity after inserting dead time.`\n  }\n}\n","export const margin = { top: 30, right: 120, bottom: 30, left: 50 }\n","import { ScaleLinear, ticks, select, axisBottom } from 'd3'\nimport { useRef, useLayoutEffect } from 'react'\nimport { margin } from './margin'\n// import useD3Transition from 'use-d3-transition'\n\ntype ohNoItIsAny = any\n\nconst toFixed = (float: number, digits = 0) => {\n  const padding = Math.pow(10, digits)\n  return Math.round(float * padding) / padding\n}\n\nexport function formatTime(s: ohNoItIsAny) {\n  s = Number(s)\n  if (!Number.isFinite(s)) return '--'\n  if (s === 0) return '0'\n\n  const m = s / 60\n  const h = s / 60 / 60\n  const ms = s * 1000\n  const us = ms * 1000\n  const ns = us * 1000\n  if (ns < 10) return toFixed(ns, 1) + 'ns'\n  if (ns < 1000) return toFixed(ns) + 'ns'\n  if (us < 10) return toFixed(us, 1) + 'μs'\n  if (us < 1000) return toFixed(us) + 'μs'\n  if (ms < 10) return toFixed(ms, 1) + 'ms'\n  if (ms < 1000) return toFixed(ms) + 'ms'\n  if (s < 10) return toFixed(s, 1) + 's'\n  if (h > 1) return toFixed(h, 0) + 'h' + toFixed(m % 60, 1) + 'm'\n  if (m > 5) return toFixed(m, 0) + 'm' + toFixed(s % 60, 1) + 's'\n  return toFixed(s, 0) + 's'\n}\n\ntype Props = {\n  height: number\n  xScale: ScaleLinear<number, number>\n}\nexport default function XAxis({ height, xScale }: Props) {\n  const nodeRef = useRef<SVGSVGElement>(null)\n  const gEl = nodeRef.current\n  useLayoutEffect(() => {\n    if (!gEl) return\n    const xTicks = ticks(xScale.domain()[0], xScale.domain()[1], 10)\n\n    select(gEl).call((g) => {\n      g.attr('transform', `translate(0,${height - margin.bottom})`)\n        // .transition()\n        // .ease(easeLinear)\n        // .duration(100)\n        .call(\n          axisBottom(xScale)\n            .tickValues(xTicks)\n            .tickPadding(10)\n            .tickSize(-height + margin.top + margin.bottom)\n            .tickFormat((t) => formatTime(t as any))\n            .tickSizeOuter(0)\n        )\n\n      //   .call((g) => g.select('.domain').remove())\n      // g.call((g) => g.select('.domain').remove())\n\n      // return the selection:\n    })\n  }, [gEl, xScale, height])\n\n  return <g className=\"x axis\" ref={nodeRef} />\n}\n","import { ScaleLinear, ticks, select, axisLeft } from 'd3'\nimport { useRef, useLayoutEffect } from 'react'\n\nimport { margin } from './margin'\n\ntype Props = {\n  width: number\n  yScale: ScaleLinear<number, number>\n}\nexport default function YAxis({ width, yScale }: Props) {\n  const nodeRef = useRef<SVGSVGElement>(null)\n  const gEl = nodeRef.current\n\n  useLayoutEffect(() => {\n    if (!gEl) return\n    const yTicks = ticks(yScale.domain()[0], yScale.domain()[1], 10)\n    select(gEl)\n      // .transition()\n      // .duration(200)\n      .call((g) =>\n        g.attr('transform', `translate(${margin.left},0)`).call(\n          axisLeft(yScale)\n            .tickValues(yTicks)\n            .tickPadding(10)\n            .tickSize(-width + margin.right + margin.left - 1)\n            .tickFormat((v: any) => v)\n        )\n      )\n      .call((g) =>\n        g.select('.domain').attr(\n          'd',\n          (_d, _, path) =>\n            // close path so the domain has a right border\n            select(path[0]).attr('d') + 'z'\n        )\n      )\n  }, [gEl, yScale, width])\n\n  return <g className=\"y axis\" ref={nodeRef} />\n}\n","/* eslint-disable no-loop-func */\nimport { uniq } from 'lodash'\n\n/*\nPCPWM == updates at top\nPFCPWM == updates at bottom\nbut this should be passed from update OCRnX upate time bit value\n*/\ntype TimerMode = 'Normal' | 'PCPWM' | 'CTC' | 'FPWM' | 'PFCPWM'\ntype Counter = { tcnt: number; dir: number }\nconst tcntToCpu = ({ tcnt, dir }: Counter, top: number) => {\n  if (dir === -1) return 2 * top - tcnt\n  return tcnt\n}\nconst offsetCounter = (\n  counter: Counter,\n  offset: number,\n  top: number,\n  timerMode: TimerMode\n) => cpuToTcnt(tcntToCpu(counter, top) + offset, top, timerMode)\n\nconst getTimerLength = (top: number, timerMode: TimerMode) => {\n  const isDoubleSlope = ['PCPWM', 'PFCPWM'].includes(timerMode)\n  return isDoubleSlope ? top * 2 : top\n}\nconst cpuToTcnt = (cpu: number, top: number, timerMode: TimerMode) => {\n  while (cpu < 0) cpu += top\n  const isDoubleSlope = ['PCPWM', 'PFCPWM'].includes(timerMode)\n  if (!isDoubleSlope) {\n    // e.g top = 3\n    // 0 1 2 3 4 -- cpu\n    // 0 1 2 3 0 -- single slope\n    return { tcnt: cpu % (top + 1), dir: 1 }\n  }\n  // e.g top = 3\n  // 0 1 2 3 4 5 6\n  // 0 1 2 3 2 1 0 -- double slope\n  const tcnt = cpu % (top * 2)\n  if (tcnt < top) return { tcnt, dir: 1 }\n  return { tcnt: top * 2 - tcnt, dir: -1 }\n}\nconst matches = (a: Counter, b: Counter) => a.tcnt === b.tcnt && a.dir === b.dir\n\ntype Props = {\n  timerMode: TimerMode\n  prescaler: number\n  cpuHz: number\n  top: number\n  counterMax: number\n  tovTime: 'BOTTOM' | 'TOP' | 'MAX'\n  OCRnXs: number[]\n  OCRnXs_behaviour: (\n    | 'clear'\n    | 'set'\n    | 'set-on-match, clear-at-max'\n    | 'clear-on-match, set-at-max'\n    | 'toggle'\n    | 'clear-up, set-down'\n    | 'set-up, clear-down'\n  )[]\n  ICRn: number\n  deadTimeEnable: boolean\n  deadTimeA: number\n  deadTimeB: number\n}\nconst TOGGLE = -1\nexport default function simTimer({\n  timerMode,\n  prescaler,\n  cpuHz,\n  top,\n  counterMax,\n  tovTime,\n  OCRnXs,\n  OCRnXs_behaviour,\n  ICRn,\n  deadTimeEnable,\n  deadTimeA,\n  deadTimeB\n}: Props) {\n  const prescaledCPUEnd = getTimerLength(top, timerMode) * 4\n  const results = {\n    t: [] as number[],\n    cpu: [] as number[],\n    TCNT: [] as number[],\n    OCnXs: OCRnXs.map(() => [] as number[]),\n    MATCH_Xs: OCRnXs.map(() => [] as number[]),\n    OVF: [] as number[],\n    CAPT: [] as number[],\n    deadTimes: [[], []] as number[][],\n    freq: cpuHz / (getTimerLength(top, timerMode) + 1) / prescaler\n  }\n  if (isNaN(top)) return results\n  let OCnXs = OCRnXs.map(() => 0)\n  let deadTimes = [0, 0]\n\n  const actions = OCRnXs_behaviour.map((behaviour, i) => {\n    const action = {\n      at: [] as { tcnt: number; dir: number; to: number }[],\n      matchAt: OCRnXs[i],\n      behaviour\n    }\n    switch (behaviour) {\n      case 'set':\n        action.at = [{ tcnt: OCRnXs[i], dir: 1, to: 1 }]\n        break\n      case 'clear':\n        action.at = [{ tcnt: OCRnXs[i], dir: 1, to: 0 }]\n        break\n      case 'toggle':\n        action.at = [{ tcnt: OCRnXs[i], dir: 1, to: TOGGLE }]\n        break\n      case 'set-on-match, clear-at-max':\n        action.at = [\n          { tcnt: OCRnXs[i], dir: 1, to: 1 },\n          { tcnt: top, dir: 1, to: 0 }\n        ]\n        break\n      case 'clear-on-match, set-at-max':\n        action.at = [\n          { tcnt: OCRnXs[i], dir: 1, to: 0 },\n          { tcnt: top, dir: 1, to: 1 }\n        ]\n        break\n      case 'set-up, clear-down':\n        action.at = [\n          { tcnt: OCRnXs[i], dir: 1, to: 1 },\n          { tcnt: OCRnXs[i], dir: -1, to: 0 }\n        ]\n        break\n      case 'clear-up, set-down':\n        action.at = [\n          { tcnt: OCRnXs[i], dir: 1, to: 0 },\n          { tcnt: OCRnXs[i], dir: -1, to: 1 }\n        ]\n        break\n    }\n    OCnXs[i] = +!action.at[0]?.to || 0\n    return action\n  })\n\n  let actionDeadTimeA = [] as { tcnt: number; dir: number; to: number }[]\n  let actionDeadTimeB = [] as { tcnt: number; dir: number; to: number }[]\n\n  if (deadTimeEnable) {\n    /* deadtime \n      setB at setB + deadTimeB\n      changeA at setB (to !isAInverted)\n      clearB at clearB\n      changeA at clearB+deadTimeA (to isAInverted)\n    */\n    const bClear = actions[1].at.find(({ to }) => to === 0)!\n    const bSet = actions[1].at.find(({ to }) => to === 1)!\n    actionDeadTimeA = [{ to: 1, tcnt: bClear.tcnt, dir: bClear.dir }]\n    if (deadTimeA < top)\n      actionDeadTimeA.push({\n        to: 0,\n        ...offsetCounter(bClear, deadTimeA, top, timerMode)\n      })\n    actionDeadTimeB = [{ to: 1, tcnt: bSet.tcnt, dir: bSet.dir }]\n    if (deadTimeB < top)\n      actionDeadTimeB.push({\n        to: 0,\n        ...offsetCounter(bSet, deadTimeB, top, timerMode)\n      })\n  }\n  let tcntEventTimes = [\n    // Optimization:\n    // Things happen only when TCNT equals these values.\n    // values surounding the events are added to ensure the plot\n    // keeps the lines at their values until a change happens\n    0,\n    ...OCRnXs,\n    ICRn,\n    ...actionDeadTimeA.map(({ tcnt }) => tcnt),\n    ...actionDeadTimeB.map(({ tcnt }) => tcnt),\n    top,\n    counterMax\n  ].flatMap((n) => [n - 1, n, n + 1])\n\n  let prescaledCPU = -1\n  tcntEventTimes = uniq(tcntEventTimes)\n\n  let counter = {\n    tcnt: -1,\n    dir: 1\n  }\n  while (prescaledCPU < prescaledCPUEnd) {\n    const nextEvents = tcntEventTimes\n      .map((n) => (n - counter.tcnt) * counter.dir)\n      .filter((n) => n > 0)\n    let distToNext = Math.min(...nextEvents)\n    let MATCH_Xs = OCRnXs.map(() => 0)\n    let OVF = 0\n    let CAPT = 0\n    prescaledCPU += distToNext\n\n    counter = cpuToTcnt(prescaledCPU, top, timerMode)\n    if (counter.tcnt === 0 && tovTime === 'BOTTOM') OVF = 1\n    if (counter.tcnt === top && tovTime === 'TOP') OVF = 1\n    if (counter.tcnt === counterMax && tovTime === 'MAX') OVF = 1\n\n    actions.forEach(({ at, matchAt }, i) => {\n      at.forEach((action) => {\n        if (matches(counter, action)) {\n          OCnXs[i] = action.to === TOGGLE ? +!OCnXs[i] : action.to\n        }\n      })\n      ;[actionDeadTimeA, actionDeadTimeB].forEach((at, i) => {\n        at.forEach((action) => {\n          if (matches(counter, action)) {\n            deadTimes[i] = action.to\n          }\n        })\n      })\n      if (counter.tcnt === matchAt) MATCH_Xs[i] = 1\n    })\n\n    if (counter.tcnt === ICRn) CAPT = 1\n    results.t.push((prescaledCPU * prescaler) / cpuHz)\n    results.cpu.push(prescaledCPU * prescaler)\n    results.TCNT.push(counter.tcnt)\n    results.OVF.push(OVF)\n    results.CAPT.push(CAPT)\n    for (const i in OCRnXs_behaviour) {\n      results.OCnXs[i].push(OCnXs[i])\n      results.MATCH_Xs[i].push(MATCH_Xs[i])\n    }\n    for (const i in deadTimes) {\n      results.deadTimes[i].push(deadTimes[i])\n    }\n  }\n  if (deadTimeEnable) {\n    if (OCRnXs_behaviour[0] === OCRnXs_behaviour[1]) {\n      results.OCnXs[0] = results.OCnXs[1].map(\n        (b, i) => +(b || results.deadTimes[0][i])\n      )\n    } else {\n      results.OCnXs[0] = results.OCnXs[1].map(\n        (b, i) => +(!b && !results.deadTimes[0][i])\n      )\n    }\n    results.OCnXs[1] = results.OCnXs[1].map(\n      (b, i) => +(b && !results.deadTimes[1][i])\n    )\n  }\n  return results\n}\n\nexport type Simulation = ReturnType<typeof simTimer>\n","import {\n  forwardRef,\n  MouseEventHandler,\n  useCallback,\n  useImperativeHandle,\n  useState\n} from 'react'\nimport { margin } from './margin'\nimport './CompareRegisterHandle.css'\nimport { ScaleLinear } from 'd3-scale'\n\nexport type CompareRegisterHandleRef = {\n  onMouseUp: MouseEventHandler\n  onMouseMove: (n: number, e: MouseEvent | TouchEvent) => void\n}\ntype Props = {\n  width: number\n  yExtent: [number, number]\n  yScale: ScaleLinear<number, number>\n  setCompareRegisterValue: (n: number) => void\n  compareRegisterValue: number\n  name: string\n}\n\nconst constrain = (n: number, min: number, max: number) =>\n  Math.min(Math.max(n, min), max)\n\nconst CompareRegisterHandle = forwardRef<CompareRegisterHandleRef, Props>(\n  (\n    {\n      width,\n      yScale,\n      setCompareRegisterValue,\n      compareRegisterValue,\n      yExtent,\n      name\n    },\n    ref\n  ) => {\n    const [draggingTV, setDraggingTV] = useState(false)\n    useImperativeHandle(ref, () => ({\n      onMouseUp() {\n        setDraggingTV(false)\n      },\n      onMouseMove(y, e) {\n        e.preventDefault()\n        if (draggingTV) {\n          let scaled = yScale.invert(y)\n          scaled = constrain(Math.round(scaled), ...yExtent)\n          setCompareRegisterValue(scaled)\n        }\n      }\n    }))\n    let scaledY = yScale(constrain(compareRegisterValue, ...yExtent))\n    const onMouseDown = useCallback(\n      (e) => {\n        // e.preventDefault()\n        // e.stopPropagation()\n        setDraggingTV(true)\n      },\n      [setDraggingTV]\n    )\n    return (\n      <>\n        <line\n          className={`OCR ${name}`}\n          x1={margin.left}\n          x2={width - margin.right}\n          y1={scaledY}\n          y2={scaledY}\n        ></line>\n        <line\n          className={`OCRHandle ${name}`}\n          onMouseDown={onMouseDown}\n          onTouchStart={onMouseDown}\n          x1={margin.left}\n          x2={width}\n          y1={scaledY}\n          y2={scaledY}\n        ></line>\n        <text\n          className={`OCRText ${name}`}\n          fill=\"currentColor\"\n          onMouseDown={onMouseDown}\n          onTouchStart={onMouseDown}\n          y={scaledY}\n          x={width - margin.right}\n          dy=\".32em\"\n          dx=\"10\"\n        >\n          {name}={compareRegisterValue}\n        </text>\n      </>\n    )\n  }\n)\n\nCompareRegisterHandle.displayName = 'CompareRegisterHandle'\n\nexport default CompareRegisterHandle\n","import { ScaleLinear, line } from 'd3'\n\ntype Props = {\n  label: string\n  flagValues: number[]\n  t: number[]\n  TCNT: number[]\n  xScale: ScaleLinear<number, number>\n  yScale: ScaleLinear<number, number>\n}\nexport default function InterruptArrow({\n  label,\n  flagValues,\n  t,\n  TCNT,\n  xScale,\n  yScale\n}: Props) {\n  return (\n    <>\n      {flagValues.map(\n        (n, i) =>\n          n && (\n            <g\n              key={i}\n              transform={`translate(${xScale(t[i])}, ${yScale(TCNT[i])})`}\n            >\n              <path\n                d={\n                  line()([\n                    [-3, -5],\n                    [0, 0],\n                    [3, -5],\n                    [0, 0],\n                    [0, -12],\n                    [20, -12]\n                  ])!\n                }\n              />\n              <text key={i} y=\"-20\" x=\"0\" dy=\".32em\">\n                {label}\n              </text>\n            </g>\n          )\n      )}\n    </>\n  )\n}\n","import { ScaleLinear, line } from 'd3'\nimport { margin } from './margin'\n\nimport './Curve.css'\n\ntype CurvesProps = {\n  data: [number, number][]\n  xScale: ScaleLinear<number, number>\n  yScale: ScaleLinear<number, number>\n  idx: any\n  name?: string\n}\n\nexport function Curve({ xScale, yScale, data, idx, name }: CurvesProps) {\n  const theLine = line<[number, number]>()\n    .x(([t, datum]) => xScale(t)!)\n    .y(([t, datum]) => yScale(datum)!)\n\n  const d = theLine(data)\n  return (\n    <>\n      <path className={`curve-${idx}`} d={d || undefined}></path>\n      {name && (\n        <text\n          className={`OCText ${name}`}\n          fill=\"currentColor\"\n          y={yScale(0)}\n          x={xScale(0) - margin.left}\n          dy=\".32em\"\n          dx=\"10\"\n        >\n          {name}\n        </text>\n      )}\n    </>\n  )\n}\n","import { TRow } from './types'\n\nexport type GenericCompRegName =\n  | 'OutputA'\n  | 'OutputB'\n  | 'OutputC'\n  | 'Input'\n  | 'DeadTimeA'\n  | 'DeadTimeB'\n\nconst getName = (genericName: GenericCompRegName, bitValues: TRow) =>\n  ({\n    OutputA: `OCR${bitValues.timerNr}A`,\n    OutputB: `OCR${bitValues.timerNr}B`,\n    OutputC: `OCR${bitValues.timerNr}C`,\n    Input: `ICR${bitValues.timerNr}`,\n    DeadTimeA: `DTR${bitValues.timerNr}L`,\n    DeadTimeB: `DTR${bitValues.timerNr}H`\n  }[genericName])\n\nconst getIsTop = (genericName: GenericCompRegName, bitValues: TRow) =>\n  bitValues.topValue === getName(genericName, bitValues)\nconst getIsInterrupt = (genericName: GenericCompRegName, bitValues: TRow) =>\n  bitValues[\n    {\n      OutputA: `OCIE${bitValues.timerNr}A`,\n      OutputB: `OCIE${bitValues.timerNr}B`,\n      OutputC: `OCIE${bitValues.timerNr}C`,\n      Input: `ICIE${bitValues.timerNr}`,\n      DeadTimeA: `DTRL${bitValues.timerNr}`,\n      DeadTimeB: `DTRH${bitValues.timerNr}`\n    }[genericName]\n  ] === '1'\nconst getPinName = (genericName: GenericCompRegName, bitValues: TRow) =>\n  bitValues[\n    {\n      OutputA: `OCnA_OutputPort`,\n      OutputB: `OCnB_OutputPort`,\n      OutputC: `OCnC_OutputPort`,\n      Input: ``,\n      DeadTimeA: ``,\n      DeadTimeB: ``\n    }[genericName]\n  ]\nconst getIsActiveOutput = (genericName: GenericCompRegName, bitValues: TRow) =>\n  (bitValues[\n    {\n      OutputA: `CompareOutputModeA`,\n      OutputB: `CompareOutputModeB`,\n      OutputC: `CompareOutputModeC`,\n      Input: ``,\n      DeadTimeA: ``,\n      DeadTimeB: ``\n    }[genericName]\n  ] || 'disconnect') !== 'disconnect'\nconst getIsActiveDeadTime = (\n  genericName: GenericCompRegName,\n  bitValues: TRow\n) =>\n  bitValues[\n    {\n      OutputA: ``,\n      OutputB: ``,\n      OutputC: ``,\n      Input: ``,\n      DeadTimeA: `DeadTime`,\n      DeadTimeB: `DeadTime`\n    }[genericName]\n  ] === 'on'\nconst getIsUsed = (genericName: GenericCompRegName, bitValues: TRow) =>\n  getIsTop(genericName, bitValues) ||\n  getIsInterrupt(genericName, bitValues) ||\n  getIsActiveOutput(genericName, bitValues) ||\n  getIsActiveDeadTime(genericName, bitValues)\n\nconst getIsInput = (genericName: GenericCompRegName) =>\n  ({\n    OutputA: false,\n    OutputB: false,\n    OutputC: false,\n    Input: true,\n    DeadTimeA: false,\n    DeadTimeB: false\n  }[genericName])\nconst getIsOutput = (genericName: GenericCompRegName) =>\n  ({\n    OutputA: true,\n    OutputB: true,\n    OutputC: true,\n    Input: false,\n    DeadTimeA: false,\n    DeadTimeB: false\n  }[genericName])\nconst getIsDeadTime = (genericName: GenericCompRegName) =>\n  ({\n    OutputA: false,\n    OutputB: false,\n    OutputC: false,\n    Input: false,\n    DeadTimeA: true,\n    DeadTimeB: true\n  }[genericName])\n\nexport const compareRegs: GenericCompRegName[] = [\n  'OutputA',\n  'OutputB',\n  'OutputC',\n  'Input',\n  'DeadTimeA',\n  'DeadTimeB'\n]\n\nexport const getCompareRegTraits = (\n  genericName: GenericCompRegName,\n  bitValues: TRow\n) => {\n  const name = getName(genericName, bitValues)\n  const value = parseFloat(bitValues[name] || '')\n  // if (Number.isNaN(value)) debugger\n  return {\n    genericName: genericName,\n    name,\n    value,\n    code: `${name} = ${value};`,\n    pinModeCode: (getPinName(genericName, bitValues) || '')\n      .split('+')\n      .map((pinName) => `pinMode(${pinName}, OUTPUT);`),\n    isInput: getIsInput(genericName),\n    isOutput: getIsOutput(genericName),\n    isDeadTime: getIsDeadTime(genericName),\n    isActiveOutput: getIsActiveOutput(genericName, bitValues),\n    isTop: getIsTop(genericName, bitValues),\n    isInterrupt: getIsInterrupt(genericName, bitValues),\n    isUsed: getIsUsed(genericName, bitValues)\n  }\n}\nexport const getAllCompareRegTraits = (bitValues: TRow) =>\n  compareRegs.map((genericName) => getCompareRegTraits(genericName, bitValues))\n","export type TTableNames = string\n\nexport type TRow = {\n  [k: string]: string | undefined\n}\nexport type TTable = TRow[]\nexport type TTimerConfig = TTable[]\n\nexport type TTimerRegisters = {\n  [k: string]: string[]\n}\nexport type TDescriptions = {\n  [k: string]: string\n}\n\nexport type TDefaultState = TRow\n\nexport type TTimer = {\n  configs: TTimerConfig\n  registers: TTimerRegisters\n  timerNr: number\n}\nexport enum PanelModes {\n  Normal = 'Normal',\n  Internal = 'With Internals',\n  ByDependencies = 'By Dependencies'\n}\nexport enum MicroControllers {\n  LGT8F328P = 'LGT8F328P',\n  ATMEGA328P = 'ATMEGA328P'\n}\n","import { useState, useEffect } from 'react'\n\nconst getHashParams = () => {\n  const hash = window.location.hash.slice(1)\n  return new URLSearchParams(hash)\n}\n\nconst setFullHash = (hash: string) => {\n  const currentHash = window.location.hash.slice(1)\n  if (hash !== currentHash) {\n    window.location.replace(`${window.location.pathname}#${hash}`)\n  }\n}\nexport const setHashFromObject = (\n  record: Record<string, string | undefined>\n) => {\n  const cleanRecord = Object.fromEntries(\n    Object.entries(record).filter(([, val]) => val !== undefined)\n  ) as Record<string, string>\n  const hashParams = new URLSearchParams(cleanRecord)\n  return setFullHash(hashParams.toString())\n}\nexport const setHashParam = (key: string, value: string | undefined) => {\n  const hashParams = getHashParams()\n  if (value === undefined) {\n    hashParams.delete(key)\n  } else {\n    hashParams.set(key, value)\n  }\n  setFullHash(hashParams.toString())\n}\n\nexport const useHashParams = () => {\n  const [hashParams, setHashParams] = useState<URLSearchParams>(\n    new URLSearchParams(window.location.hash.slice(1))\n  )\n  useEffect(() => {\n    const handleHashChange = () => {\n      setHashParams(getHashParams())\n    }\n\n    handleHashChange()\n    window.addEventListener('hashchange', handleHashChange)\n    return () => window.removeEventListener('hashchange', handleHashChange)\n  }, [])\n\n  return Object.fromEntries(hashParams.entries())\n}\n","import timer0 from './timer0'\nimport timer1 from './timer1'\nimport timer2 from './timer2'\nimport timer3 from './timer3'\nconst timers = [timer0, timer1, timer2, timer3]\nexport default timers\n","import { tsv, tsvRegisters } from '../timers'\nimport { TTimerConfig } from '../../helpers/types'\n\nconst registers = tsvRegisters(`\nTCCR0A\tTCCR0B\tTCCR0C\tTIMSK0\tDTR0\tTIFR0\tTCKCSR\tPMX0\tHDR\nCOM0A1\tFOC0A\tDSX07\t-\tDTR07\tOC0A\t-\tWCE\t-\nCOM0A0\tFOC0B\tDSX06\t-\tDTR06\tOC0B\tF2XEN\tC1BF4\t-\nCOM0B1\tOC0AS\tDSX05\t-\tDTR05\t-\tTC2XF1\tC1AF5\tHDR5\nCOM0B0\tDTEN0\tDSX04\t-\tDTR04\t-\tTC2XF0\tC0BF3\tHDR4\nDOC0B\tWGM02\t-\t-\tDTR03\t-\t-\tC0AC0\tHDR3\nDOC0A\tCS02\t-\tOCIE0B\tDTR02\tOCF0B\tAFCKS\tSSB1\tHDR2\nWGM01\tCS01\tDSX01\tOCIE0A\tDTR01\tOCF0A\tTC2XS1\tTXD6\tHDR1\nWGM00\tCS00\tDSX00\tTOIE0\tDTR00\tTOV0\tTC2XS0\tRXD5\tHDR0\n`)\nconst configs: TTimerConfig = [\n  tsv(`\ntimerNr\ttimerBits\tcounterMax\tFCPU\n0\t8\t255\t32000000\n`),\n  tsv(`\nWGM0\tWGM02\tWGM01\tWGM00\ttimerMode\ttopValue\tupdateOcrMoment\tsetTovMoment\n0\t0\t0\t0\tNormal\t0xFF\timmediate\tMAX\n1\t0\t0\t1\tPCPWM\t0xFF\tTOP\tBOTTOM\n2\t0\t1\t0\tCTC\tOCR0A\timmediate\tMAX\n3\t0\t1\t1\tFPWM\t0xFF\tTOP\tMAX\n4\t1\t0\t0\t-\t-\t-\t-\n5\t1\t0\t1\tPCPWM\tOCR0A\tTOP\tBOTTOM\n6\t1\t1\t0\t-\t-\t-\t-\n7\t1\t1\t1\tFPWM\tOCR0A\tTOP\tTOP\n`),\n  tsv(`\nCOM0A\tCOM0A1\tCOM0A0\ttimerMode\tCompareOutputModeA\tWGM02\tCompareOutputModeB\n0\t0\t0\tNormal\tdisconnect\n1\t0\t1\tNormal\ttoggle\n2\t1\t0\tNormal\tclear\n3\t1\t1\tNormal\tset\n0\t0\t0\tCTC\tdisconnect\n1\t0\t1\tCTC\ttoggle\n2\t1\t0\tCTC\tclear\n3\t1\t1\tCTC\tset\n0\t0\t0\tFPWM\tdisconnect\n1\t0\t1\tFPWM\ttoggle\t1\tdisconnect\n2\t1\t0\tFPWM\tclear-on-match, set-at-max\n3\t1\t1\tFPWM\tset-on-match, clear-at-max\n0\t0\t0\tPCPWM\tdisconnect\n1\t0\t1\tPCPWM\ttoggle\t1\tdisconnect\n2\t1\t0\tPCPWM\tclear-up, set-down\n3\t1\t1\tPCPWM\tset-up, clear-down\n`),\n  tsv(`\nCOM0B\tCOM0B1\tCOM0B0\ttimerMode\tCompareOutputModeB\n0\t0\t0\tNormal\tdisconnect\n1\t0\t1\tNormal\ttoggle\n2\t1\t0\tNormal\tclear\n3\t1\t1\tNormal\tset\n0\t0\t0\tCTC\tdisconnect\n1\t0\t1\tCTC\ttoggle\n2\t1\t0\tCTC\tclear\n3\t1\t1\tCTC\tset\n0\t0\t0\tFPWM\tdisconnect\n1\t0\t1\tFPWM\t-\n2\t1\t0\tFPWM\tclear-on-match, set-at-max\n3\t1\t1\tFPWM\tset-on-match, clear-at-max\n0\t0\t0\tPCPWM\tdisconnect\n1\t0\t1\tPCPWM\t-\n2\t1\t0\tPCPWM\tclear-up, set-down\n3\t1\t1\tPCPWM\tset-up, clear-down\n`),\n  tsv(`\nCS0\tCS02\tCS01\tCS00\tclockPrescalerOrSource\tExternalClockInput\n1\t0\t0\t1\t1\tN/A\n2\t0\t1\t0\t8\tN/A\n3\t0\t1\t1\t64\tN/A\n4\t1\t0\t0\t256\tN/A\n5\t1\t0\t1\t1024\tN/A\n6\t1\t1\t0\texternal clock falling edge\tD4\n7\t1\t1\t1\texternal clock rising edge\tD4\n0\t0\t0\t0\tdisconnect\tN/A\n`),\n  tsv(`\nOCIE0A\tinterruptA\tinterruptVectorCodeA\n0\toff\t//nocode\n1\ton\tISR(TIMER0_COMPA_vect) {\\\\n    /* on OCR0A match */\\\\n}\n`),\n  tsv(`\nOCIE0B\tinterruptB\tinterruptVectorCodeB\n0\toff\t//nocode\n1\ton\tISR(TIMER0_COMPB_vect) {\\\\n    /* on OCR0B match */\\\\n}\n    \n`),\n  tsv(`\nTOIE0\tInterruptOnTimerOverflow\tinterruptVectorCodeOVF\n0\toff\t//nocode\n1\ton\tISR(TIMER0_OVF_vect) {\\\\n    /* on overflow */\\\\n}\n`),\n  tsv(`\nF2XEN\tTC2XS0\tclockDoubler\tExternalClockInput\n0\t0\toff\n1\t0\toff\n1\t1\ton\tN/A\n`),\n  tsv(`\nC0AC0\tOC0AS\tWCE\tOCnA_OutputPort\n0\t0\t0\tD6\n0\t0\t1\tD6\n0\t1\t1\tE4\n1\t0\t1\tC0\n1\t1\t1\tE4+C0\n`),\n  tsv(`\nC0BF3\tWCE\tOCnB_OutputPort\n0\t0\tD5\n0\t1\tD5\n1\t1\tF3\n`),\n  tsv(`\nHDR0\tOCnB_OutputPort\tOCnB_OutputCurrent\n0\t\t12mA\n1\tD5\t80mA\n`),\n  tsv(`\nHDR1\tOCnA_OutputPort\tOCnA_OutputCurrent\n0\t\t12mA\n1\tD6\t80mA\n`),\n  tsv(`\nDTEN0\tDeadTime\n0\toff\n1\ton\n`),\n  tsv(`\ntimerMode\tDTEN0\nNormal\t0\nCTC\t0\nFPWM\t\nPCPWM\t\n`),\n  tsv(`\nDTEN0\tCOM0A\n0\t\n1\t2\n1\t3\n`),\n  tsv(`\nDTEN0\tCOM0B\n0\t\n1\t2\n1\t3\n`),\n  // [{ OCR0A: Math.round((255 * 2) / 3) + '' }],\n  // [{ OCR0B: Math.round((255 * 1) / 3) + '' }]\n  [{ DTR0L: '' }],\n  [{ DTR0H: '' }],\n  [{ OCR0A: '' }],\n  [{ OCR0B: '' }]\n]\nconst timer = { registers, configs }\nexport default timer\n","import { tsv, tsvRegisters } from '../timers'\nimport { TTimerConfig } from '../../helpers/types'\n\nconst registers = tsvRegisters(`\nTCCR1A\tTCCR1B\tTCCR1C\tTCCR1D\tTIMSK1\tDTR1\tTIFR1\tTCKCSR\tPMX0\tHDR\nCOM1A1\tICNC1\tFOC1A\tDSX17\t-\t\t-\t-\tWCE\t-\nCOM1A0\tICES1\tFOC1B\tDSX16\t-\t\t-\tF2XEN\tC1BF4\t-\nCOM1B1\t-\tDOC1B\tDSX15\tICIE1\t\tICF1\tTC2XF1\tC1AF5\tHDR5\nCOM1B0\tWGM13\tDOC1A\tDSX14\t-\t\t-\tTC2XF0\tC0BF3\tHDR4\n-\tWGM12\tDTEN1\t-\t-\t\t-\t-\tC0AC0\tHDR3\n-\tCS12\t-\t-\tOCIE1A\t\tOCF1B\tAFCKS\tSSB1\tHDR2\nWGM11\tCS11\t-\tDSX11\tOCIE1B\t\tOCF1A\tTC2XS1\tTXD6\tHDR1\nWGM10\tCS10\t-\tDSX10\tTOIE1\t\tTOV1\tTC2XS0\tRXD5\tHDR0\n`)\nconst configs: TTimerConfig = [\n  tsv(`\ntimerNr\ttimerBits\tcounterMax\tFCPU\n1\t16\t65535\t32000000\n`),\n  tsv(`\nWGM1\tWGM13\tWGM12\tWGM11\tWGM10\ttimerMode\ttopValue\tupdateOcrMoment\tsetTovMoment\n0\t0\t0\t0\t0\tNormal\t0xFFFF\timmediate\tMAX\n1\t0\t0\t0\t1\tPCPWM\t0x00FF\tTOP\tBOTTOM\n2\t0\t0\t1\t0\tPCPWM\t0x01FF\tTOP\tBOTTOM\n3\t0\t0\t1\t1\tPCPWM\t0x03FF\tTOP\tBOTTOM\n4\t0\t1\t0\t0\tCTC\tOCR1A\timmediate\tMAX\n5\t0\t1\t0\t1\tFPWM\t0x00FF\tBOTTOM\tTOP\n6\t0\t1\t1\t0\tFPWM\t0x01FF\tBOTTOM\tTOP\n7\t0\t1\t1\t1\tFPWM\t0x03FF\tBOTTOM\tTOP\n8\t1\t0\t0\t0\tPFCPWM\tICR1\tBOTTOM\tBOTTOM\n9\t1\t0\t0\t1\tPFCPWM\tOCR1A\tBOTTOM\tBOTTOM\n10\t1\t0\t1\t0\tPCPWM\tICR1\tTOP\tBOTTOM\n11\t1\t0\t1\t1\tPCPWM\tOCR1A\tTOP\tBOTTOM\n12\t1\t1\t0\t0\tCTC\tICR1\timmediate\tMAX\n13\t1\t1\t0\t1\treserved\t-\t-\t-\n14\t1\t1\t1\t0\tFPWM\tICR1\tTOP\tTOP\n15\t1\t1\t1\t1\tFPWM\tOCR1A\tTOP\tTOP\n`),\n  tsv(`\nCOM1A\tCOM1A1\tCOM1A0\ttimerMode\tCompareOutputModeA\tWGM1\tCompareOutputModeB\n0\t0\t0\tNormal\tdisconnect\n1\t0\t1\tNormal\ttoggle\n2\t1\t0\tNormal\tclear\n3\t1\t1\tNormal\tset\n0\t0\t0\tCTC\tdisconnect\n1\t0\t1\tCTC\ttoggle\n2\t1\t0\tCTC\tclear\n3\t1\t1\tCTC\tset\n0\t0\t0\tFPWM\tdisconnect\n1\t0\t1\tFPWM\ttoggle\t15\tdisconnect\n2\t1\t0\tFPWM\tclear-on-match, set-at-max\n3\t1\t1\tFPWM\tset-on-match, clear-at-max\n0\t0\t0\tPCPWM\tdisconnect\n1\t0\t1\tPCPWM\ttoggle\t11\tdisconnect\n2\t1\t0\tPCPWM\tclear-up, set-down\n3\t1\t1\tPCPWM\tset-up, clear-down\n0\t0\t0\tPFCPWM\tdisconnect\n1\t0\t1\tPFCPWM\ttoggle\t9\tdisconnect\n2\t1\t0\tPFCPWM\tclear-up, set-down\n3\t1\t1\tPFCPWM\tset-up, clear-down\n`),\n  tsv(`\nCOM1B\tCOM1B1\tCOM1B0\ttimerMode\tCompareOutputModeB\ttopValue\n0\t0\t0\tNormal\tdisconnect\n1\t0\t1\tNormal\ttoggle\n2\t1\t0\tNormal\tclear\n3\t1\t1\tNormal\tset\n0\t0\t0\tCTC\tdisconnect\n1\t0\t1\tCTC\ttoggle\n2\t1\t0\tCTC\tclear\n3\t1\t1\tCTC\tset\n0\t0\t0\tFPWM\tdisconnect\n1\t0\t1\tFPWM\tdisconnect\n2\t1\t0\tFPWM\tclear-on-match, set-at-max\n3\t1\t1\tFPWM\tset-on-match, clear-at-max\n0\t0\t0\tPCPWM\tdisconnect\n1\t0\t1\tPCPWM\tdisconnect\n2\t1\t0\tPCPWM\tclear-up, set-down\n3\t1\t1\tPCPWM\tset-up, clear-down\n0\t0\t0\tPFCPWM\tdisconnect\n1\t0\t1\tPFCPWM\tdisconnect\n2\t1\t0\tPFCPWM\tclear-up, set-down\n3\t1\t1\tPFCPWM\tset-up, clear-down\n`),\n  tsv(`\nCS1\tCS12\tCS11\tCS10\tclockPrescalerOrSource\tExternalClockInput\n1\t0\t0\t1\t1\tN/A\n2\t0\t1\t0\t8\tN/A\n3\t0\t1\t1\t64\tN/A\n4\t1\t0\t0\t256\tN/A\n5\t1\t0\t1\t1024\tN/A\n6\t1\t1\t0\texternal clock falling edge\tD5\n7\t1\t1\t1\texternal clock rising edge\tD5\n0\t0\t0\t0\tdisconnect\tN/A\n`),\n  tsv(`\nOCIE1A\tinterruptA\tinterruptVectorCodeA\n0\toff\t//nocode\n1\ton\tISR(TIMER1_COMPA_vect) {\\\\n    /* on OCR0A match */\\\\n}\n`),\n  tsv(`\nOCIE1B\tinterruptB\tinterruptVectorCodeB\n0\toff\t//nocode\n1\ton\tISR(TIMER1_COMPB_vect) {\\\\n    /* on OCR0B match */\\\\n}\n    \n`),\n  tsv(`\nTOIE1\tInterruptOnTimerOverflow\tinterruptVectorCodeOVF\n0\toff\t//nocode\n1\ton\tISR(TIMER1_OVF_vect) {\\\\n    /* on overflow */\\\\n}\n`),\n  tsv(`\nICIE1\tInterruptOnInputCapture\tinterruptVectorCaptureCode\n0\toff\t//nocode\n1\ton\tISR(TIMER1_CAPT_vect) {\\\\n    /* on input capture */\\\\n}\n`),\n  tsv(`\nICNC1\tInputCaptureNoiseSupression\n0\toff\n1\ton\n`),\n  tsv(`\nICES1\tInputCaptureEdgeSelect\n0\tfalling\n1\trising\n`),\n  tsv(`\nF2XEN\tTC2XS1\tclockDoubler\tExternalClockInput\n0\t0\toff\n1\t0\toff\n1\t1\ton\tN/A\n`),\n  tsv(`\nC1BF4\tWCE\tOCnB_OutputPort\n0\t0\tD10\n0\t1\tD10\n1\t1\tF4\n`),\n  tsv(`\nC1AF5\tWCE\tOCnA_OutputPort\n0\t0\tD9\n0\t1\tD9\n1\t1\tF5\n`),\n  tsv(`\nHDR4\tOCnB_OutputPort\tOCnB_OutputCurrent\n0\t\t12mA\n1\tF4\t80mA\n`),\n  tsv(`\nHDR5\tOCnA_OutputPort\tOCnA_OutputCurrent\n0\t\t12mA\n1\tF5\t80mA\n`),\n  tsv(`\nDTEN1\tDeadTime\n0\toff\n1\ton\n`),\n  tsv(`\ntimerMode\tDTEN1\nNormal\t0\nCTC\t0\nFPWM\t\nPCPWM\t\nPFCPWM\t\n`),\n  tsv(`\nDTEN1\tCOM1A\n0\t\n1\t2\n1\t3\n`),\n  tsv(`\nDTEN1\tCOM1B\n0\t\n1\t2\n1\t3\n`),\n  [{ DTR1L: '' }],\n  [{ DTR1H: '' }],\n  [{ ICR1: '' }],\n  [{ OCR1A: '' }],\n  [{ OCR1B: '' }]\n]\nconst timer = { registers, configs }\nexport default timer\n","import { tsv, tsvRegisters } from '../timers'\nimport { TTimerConfig } from '../../helpers/types'\n\nconst registers = tsvRegisters(`\nTCCR2A\tTCCR2B\tTIMSK2\tTIFR2\tPMX1\tHDR\nCOM2A1\tFOC2A\t-\t-\t-\t-\nCOM2A0\tFOC2B\t-\t-\t-\t-\nCOM2B1\t-\t-\t-\t-\tHDR5\nCOM2B0\t-\t-\t-\t-\tHDR4\n-\tWGM22\t-\t-\t-\tHDR3\n-\tCS22\tOCIE2B\tOCF2B\tC3AC\tHDR2\nWGM21\tCS21\tOCIE2A\tOCF2A\tC2BF7\tHDR1\nWGM20\tCS20\tTOIE2\tTOV2\tC2AF6\tHDR0\n`)\nconst configs: TTimerConfig = [\n  tsv(`\ntimerNr\ttimerBits\tcounterMax\tFCPU\n2\t8\t255\t32000000\n  `),\n  tsv(`\nWGM2\tWGM22\tWGM21\tWGM20\ttimerMode\ttopValue\tupdateOcrMoment\tsetTovMoment\n0\t0\t0\t0\tNormal\t0xFF\timmediate\tMAX\n1\t0\t0\t1\tPCPWM\t0xFF\tTOP\tBOTTOM\n2\t0\t1\t0\tCTC\tOCR2A\timmediate\tMAX\n3\t0\t1\t1\tFPWM\t0xFF\tTOP\tMAX\n4\t1\t0\t0\t-\t-\t-\t-\n5\t1\t0\t1\tPCPWM\tOCR2A\tTOP\tBOTTOM\n6\t1\t1\t0\t-\t-\t-\t-\n7\t1\t1\t1\tFPWM\tOCR2A\tTOP\tTOP\n  `),\n\n  tsv(`\nCOM2A\tCOM2A1\tCOM2A0\ttimerMode\tCompareOutputModeA\n0\t0\t0\tNormal\tdisconnect\n1\t0\t1\tNormal\ttoggle\n2\t1\t0\tNormal\tclear\n3\t1\t1\tNormal\tset\n0\t0\t0\tCTC\tdisconnect\n1\t0\t1\tCTC\ttoggle\n2\t1\t0\tCTC\tclear\n3\t1\t1\tCTC\tset\n0\t0\t0\tFPWM\tdisconnect\n1\t0\t1\tFPWM\t-\n2\t1\t0\tFPWM\tclear-on-match, set-at-max\n3\t1\t1\tFPWM\tset-on-match, clear-at-max\n0\t0\t0\tPCPWM\tdisconnect\n1\t0\t1\tPCPWM\t-\n2\t1\t0\tPCPWM\tclear-up, set-down\n3\t1\t1\tPCPWM\tset-up, clear-down\n`),\n  tsv(`\nCOM2B\tCOM2B1\tCOM2B0\ttimerMode\tCompareOutputModeB\n0\t0\t0\tNormal\tdisconnect\n1\t0\t1\tNormal\ttoggle\n2\t1\t0\tNormal\tclear\n3\t1\t1\tNormal\tset\n0\t0\t0\tCTC\tdisconnect\n1\t0\t1\tCTC\ttoggle\n2\t1\t0\tCTC\tclear\n3\t1\t1\tCTC\tset\n0\t0\t0\tFPWM\tdisconnect\n1\t0\t1\tFPWM\t-\n2\t1\t0\tFPWM\tclear-on-match, set-at-max\n3\t1\t1\tFPWM\tset-on-match, clear-at-max\n0\t0\t0\tPCPWM\tdisconnect\n1\t0\t1\tPCPWM\t-\n2\t1\t0\tPCPWM\tclear-up, set-down\n3\t1\t1\tPCPWM\tset-up, clear-down\n`),\n  tsv(`\nCS2\tCS22\tCS21\tCS20\tclockPrescalerOrSource\n1\t0\t0\t1\t1\n2\t0\t1\t0\t8\n3\t0\t1\t1\t32\n4\t1\t0\t0\t64\n5\t1\t0\t1\t128\n6\t1\t1\t0\t256\n7\t1\t1\t1\t1024\n0\t0\t0\t0\tdisconnect\n`),\n  tsv(`\nOCIE2A\tinterruptA\tinterruptVectorCodeA\n0\toff  \t//nocode\n1\ton\tISR(TIMER2_COMPA_vect) {\\\\n    /* on OCR2A match */\\\\n}\n`),\n  tsv(`\nOCIE2B\tinterruptB\tinterruptVectorCodeB\n0\toff  \t//nocode\n1\ton\tISR(TIMER2_COMPB_vect) {\\\\n    /* on OCR2B match */\\\\n}\n    \n`),\n  tsv(`\nTOIE2\tInterruptOnTimerOverflow\tinterruptVectorCodeOVF\n0\toff  \t//nocode\n1\ton\tISR(TIMER2_OVF_vect) {\\\\n    /* on overflow */\\\\n}\n`),\n  tsv(`\nC2AF6\tOCnA_OutputPort\n0\tD11\n1\tF6\n`),\n  tsv(`\nC2BF7\tOCnB_OutputPort\n0\tD3\n1\tF7\n`),\n  // [{ OCR2A: Math.round((255 * 2) / 3) + '' }],\n  // [{ OCR2B: Math.round((255 * 1) / 3) + '' }]\n  [{ OCR2A: '' }],\n  [{ OCR2B: '' }]\n]\nconst timer = { registers, configs }\nexport default timer\n","import { tsv, tsvRegisters } from '../timers'\nimport { TTimerConfig } from '../../helpers/types'\n\nconst registers = tsvRegisters(`\nTCCR3A\tTCCR3B\tTCCR3C\tTCCR3D\tDTR3\tTIMSK3\tTIFR3\tPMX0\tPMX1\tPMX2\tHDR\nCOM3A1\tICNC3\tFOC3A\tDSX37\t\t-\t-\tWCE\t-\t-\t-\nCOM3A0\tICES3\tFOC3B\tDSX36\t\t-\t-\tC1BF4\t-\t\t-\nCOM3B1\t-\tDOC3B\tDSX35\t\tICIE3\tICF3\tC1AF5\t-\t\tHDR5\nCOM3B0\tWGM33\tDOC3A\tDSX34\t\t-\t-\tC0BF3\t-\t\tHDR4\nCOM3C1\tWGM32\tDTEN3\t-\t\tOCIE3C\tOCF3C\tC0AC0\t-\t\tHDR3\nCOM3C0\tCS32\t-\t-\t\tOCIE3B\tOCF3B\tSSB1\tC3AC\t\tHDR2\nWGM31\tCS31\tDOC3C\tDSX31\t\tOCIE3A\tOCF3A\tTXD6\tC2BF7\t\tHDR1\nWGM30\tCS30\tFOC3C\tDSX30\t\tTOIE3\tTOV3\tRXD5\tC2AF6\t\tHDR0\n`)\nconst configs: TTimerConfig = [\n  tsv(`\ntimerNr\ttimerBits\tcounterMax\tFCPU\n3\t16\t65535\t32000000\n`),\n  tsv(`\nWGM3\tWGM33\tWGM32\tWGM31\tWGM30\ttimerMode\ttopValue\tupdateOcrMoment\tsetTovMoment\n0\t0\t0\t0\t0\tNormal\t0xFFFF\tImmediately\tMAX\n1\t0\t0\t0\t1\tPCPWM\t0x00FF\tTOP\tBOTTOM\n2\t0\t0\t1\t0\tPCPWM\t0x01FF\tTOP\tBOTTOM\n3\t0\t0\t1\t1\tPCPWM\t0x03FF\tTOP\tBOTTOM\n4\t0\t1\t0\t0\tCTC\tOCR3A\tImmediately\tMAX\n5\t0\t1\t0\t1\tFPWM\t0x00FF\tBOTTOM\tTOP\n6\t0\t1\t1\t0\tFPWM\t0x01FF\tBOTTOM\tTOP\n7\t0\t1\t1\t1\tFPWM\t0x03FF\tBOTTOM\tTOP\n8\t1\t0\t0\t0\tPFCPWM\tICR3\tBOTTOM\tBOTTOM\n9\t1\t0\t0\t1\tPFCPWM\tOCR3A\tBOTTOM\tBOTTOM\n10\t1\t0\t1\t0\tPCPWM\tICR3\tTOP\tBOTTOM\n11\t1\t0\t1\t1\tPCPWM\tOCR3A\tTOP\tBOTTOM\n12\t1\t1\t0\t0\tCTC\tICR3\tImmediately\tMAX\n13\t1\t1\t0\t1\t-\t-\t-\t-\n14\t1\t1\t1\t0\tFPWM\tICR3\tTOP\tTOP\n15\t1\t1\t1\t1\tFPWM\tOCR3A\tTOP\tTOP\n`),\n  tsv(`\nCOM3A\tCOM3A1\tCOM3A0\ttimerMode\tCompareOutputModeA\tWGM3\tCompareOutputModeB\tCompareOutputModeC\n0\t0\t0\tNormal\tdisconnect\n1\t0\t1\tNormal\ttoggle\n2\t1\t0\tNormal\tclear\n3\t1\t1\tNormal\tset\n0\t0\t0\tCTC\tdisconnect\n1\t0\t1\tCTC\ttoggle\n2\t1\t0\tCTC\tclear\n3\t1\t1\tCTC\tset\n0\t0\t0\tFPWM\tdisconnect\n1\t0\t1\tFPWM\ttoggle\t15\tdisconnect\tdisconnect\n2\t1\t0\tFPWM\tclear-on-match, set-at-max\n3\t1\t1\tFPWM\tset-on-match, clear-at-max\n0\t0\t0\tPCPWM\tdisconnect\n1\t0\t1\tPCPWM\ttoggle\t11\tdisconnect\tdisconnect\n2\t1\t0\tPCPWM\tclear-up, set-down\n3\t1\t1\tPCPWM\tset-up, clear-down\n0\t0\t0\tPFCPWM\tdisconnect\n1\t0\t1\tPFCPWM\ttoggle\t9\tdisconnect\tdisconnect\n2\t1\t0\tPFCPWM\tclear-up, set-down\n3\t1\t1\tPFCPWM\tset-up, clear-down\n`),\n  tsv(`\nCOM3B\tCOM3B1\tCOM3B0\ttimerMode\tCompareOutputModeB\n0\t0\t0\tNormal\tdisconnect\n1\t0\t1\tNormal\ttoggle\n2\t1\t0\tNormal\tclear\n3\t1\t1\tNormal\tset\n0\t0\t0\tCTC\tdisconnect\n1\t0\t1\tCTC\ttoggle\n2\t1\t0\tCTC\tclear\n3\t1\t1\tCTC\tset\n0\t0\t0\tFPWM\tdisconnect\n1\t0\t1\tFPWM\tdisconnect\n2\t1\t0\tFPWM\tclear-on-match, set-at-max\n3\t1\t1\tFPWM\tset-on-match, clear-at-max\n0\t0\t0\tPCPWM\tdisconnect\n1\t0\t1\tPCPWM\tdisconnect\n2\t1\t0\tPCPWM\tclear-up, set-down\n3\t1\t1\tPCPWM\tset-up, clear-down\n0\t0\t0\tPFCPWM\tdisconnect\n1\t0\t1\tPFCPWM\tdisconnect\n2\t1\t0\tPFCPWM\tclear-up, set-down\n3\t1\t1\tPFCPWM\tset-up, clear-down\n`),\n  tsv(`\nCOM3C\tCOM3C1\tCOM3C0\ttimerMode\tCompareOutputModeC\n0\t0\t0\tNormal\tdisconnect\n1\t0\t1\tNormal\ttoggle\n2\t1\t0\tNormal\tclear\n3\t1\t1\tNormal\tset\n0\t0\t0\tCTC\tdisconnect\n1\t0\t1\tCTC\ttoggle\n2\t1\t0\tCTC\tclear\n3\t1\t1\tCTC\tset\n0\t0\t0\tFPWM\tdisconnect\n1\t0\t1\tFPWM\tdisconnect\n2\t1\t0\tFPWM\tclear-on-match, set-at-max\n3\t1\t1\tFPWM\tset-on-match, clear-at-max\n0\t0\t0\tPCPWM\tdisconnect\n1\t0\t1\tPCPWM\tdisconnect\n2\t1\t0\tPCPWM\tclear-up, set-down\n3\t1\t1\tPCPWM\tset-up, clear-down\n0\t0\t0\tPFCPWM\tdisconnect\n1\t0\t1\tPFCPWM\tdisconnect\n2\t1\t0\tPFCPWM\tclear-up, set-down\n3\t1\t1\tPFCPWM\tset-up, clear-down\n`),\n  tsv(`\nCS3\tCS32\tCS31\tCS30\tclockPrescalerOrSource\tExternalClockInput\n1\t0\t0\t1\t1\tN/A\n2\t0\t1\t0\t8\tN/A\n3\t0\t1\t1\t64\tN/A\n4\t1\t0\t0\t256\tN/A\n5\t1\t0\t1\t1024\tN/A\n6\t1\t1\t0\texternal clock falling edge\tPF6\n7\t1\t1\t1\texternal clock rising edge\tPF6\n0\t0\t0\t0\tdisconnect\tN/A\n`),\n  tsv(`\nInterruptCommonSignature\nISR(TIMER3_vect)\n`),\n  tsv(`\nOCIE3A\tinterruptA\tinterruptVectorCodeA\n0\toff  \t//nocode\n1\ton\tif (TIFR3 & (1 << OCF3A)) {\\\\n    TIFR3 = 1 << OCF3A;\\\\n    /* on OCR3A match */\\\\n}\n`),\n  tsv(`\nOCIE3B\tinterruptB\tinterruptVectorCodeB\n0\toff  \t//nocode\n1\ton\tif (TIFR3 & (1 << OCF3B)) {\\\\n    TIFR3 = 1 << OCF3B;\\\\n    /* on OCR3B match */\\\\n}\n`),\n  tsv(`\nOCIE3C\tinterruptC\tinterruptVectorCodeC\n0\toff  \t//nocode\n1\ton\tif (TIFR3 & (1 << OCF3C)) {\\\\n    TIFR3 = 1 << OCF3C;\\\\n    /* on OCR3C match */\\\\n}\n`),\n  tsv(`\nTOIE3\tInterruptOnTimerOverflow\tinterruptVectorCodeOVF\n0\toff  \t//nocode\n1\ton\tif (TIFR3 & (1 << TOV3)) {\\\\n    TIFR3 = 1 << TOV3;\\\\n    /* on overflow */\\\\n}\n`),\n  tsv(`\nICIE3\tInterruptOnInputCapture\tinterruptVectorCaptureCode\n0\toff  \t//nocode\n1\ton\tif (TIFR3 & (1 << ICF3)) {\\\\n    TIFR3 = 1 << ICF3;\\\\n    /* on capture */\\\\n}\n`),\n  tsv(`\nICNC3\tInputCaptureNoiseSupression\n0\toff\n1\ton\n`),\n  tsv(`\nC3AC\tWCE\tOCnA_OutputPort\n0\t0\tF1\n0\t1\tF1\n1\t1\tD6\n`),\n  tsv(`\nOCnB_OutputPort\nF2\n`),\n  tsv(`\nOCnC_OutputPort\nF3\n`),\n  tsv(`\nHDR2\tOCnA_OutputPort\tOCnA_OutputCurrent\n0\t\t12mA\n1\tF1\t80mA\n`),\n  tsv(`\nHDR3\tOCnB_OutputPort\tOCnB_OutputCurrent\n0\t\t12mA\n1\tF2\t80mA\n`),\n  tsv(`\nOCnC_OutputCurrent\n12mA\n`),\n  tsv(`\nDTEN3\tDeadTime\n0\toff\n1\ton\n`),\n  tsv(`\ntimerMode\tDTEN3\nNormal\t0\nCTC\t0\nFPWM\t\nPCPWM\t\nPFCPWM\t\n`),\n  tsv(`\nDTEN3\tCOM3A\n0\t\n1\t2\n1\t3\n`),\n  tsv(`\nDTEN3\tCOM3B\n0\t\n1\t2\n1\t3\n`),\n  // [{ OCR0A: Math.round((255 * 2) / 3) + '' }],\n  // [{ OCR0B: Math.round((255 * 1) / 3) + '' }]\n  [{ DTR3L: '' }],\n  [{ DTR3H: '' }],\n  [{ ICR3: '' }],\n  [{ OCR3A: '' }],\n  [{ OCR3B: '' }],\n  [{ OCR3C: '' }]\n]\n\nconst timer = { registers, configs }\nexport default timer\n","import timer0 from './timer0'\nimport timer1 from './timer1'\nimport timer2 from './timer2'\nconst timers = [timer0, timer1, timer2]\nexport default timers\n","import { tsv, tsvRegisters } from '../timers'\nimport { TTimerConfig } from '../../helpers/types'\n\nconst registers = tsvRegisters(`\nTCCR0A\tTCCR0B\tTCCR0C\tTIMSK0\tTIFR0\nCOM0A1\tFOC0A\tDSX07\t-\tOC0A\nCOM0A0\tFOC0B\tDSX06\t-\tOC0B\nCOM0B1\t-\tDSX05\t-\t-\nCOM0B0\t-\tDSX04\t-\t-\n-\tWGM02\t-\t-\t-\n-\tCS02\t-\tOCIE0B\tOCF0B\nWGM01\tCS01\tDSX01\tOCIE0A\tOCF0A\nWGM00\tCS00\tDSX00\tTOIE0\tTOV0\n`)\nconst configs: TTimerConfig = [\n  tsv(`\ntimerNr\ttimerBits\tcounterMax\tFCPU\n0\t8\t255\t16000000\n`),\n  tsv(`\nWGM0\tWGM02\tWGM01\tWGM00\ttimerMode\ttopValue\tupdateOcrMoment\tsetTovMoment\n0\t0\t0\t0\tNormal\t0xFF\timmediate\tMAX\n1\t0\t0\t1\tPCPWM\t0xFF\tTOP\tBOTTOM\n2\t0\t1\t0\tCTC\tOCR0A\timmediate\tMAX\n3\t0\t1\t1\tFPWM\t0xFF\tTOP\tMAX\n4\t1\t0\t0\t-\t-\t-\t-\n5\t1\t0\t1\tPCPWM\tOCR0A\tTOP\tBOTTOM\n6\t1\t1\t0\t-\t-\t-\t-\n7\t1\t1\t1\tFPWM\tOCR0A\tTOP\tTOP\n  `),\n  tsv(`\nCOM0A\tCOM0A1\tCOM0A0\ttimerMode\tCompareOutputModeA\tWGM02\tCompareOutputModeB\n0\t0\t0\tNormal\tdisconnect\n1\t0\t1\tNormal\ttoggle\n2\t1\t0\tNormal\tclear\n3\t1\t1\tNormal\tset\n0\t0\t0\tCTC\tdisconnect\n1\t0\t1\tCTC\ttoggle\n2\t1\t0\tCTC\tclear\n3\t1\t1\tCTC\tset\n0\t0\t0\tFPWM\tdisconnect\n1\t0\t1\tFPWM\ttoggle\t1\tdisconnect\n2\t1\t0\tFPWM\tclear-on-match, set-at-max\n3\t1\t1\tFPWM\tset-on-match, clear-at-max\n0\t0\t0\tPCPWM\tdisconnect\n1\t0\t1\tPCPWM\ttoggle\t1\tdisconnect\n2\t1\t0\tPCPWM\tclear-up, set-down\n3\t1\t1\tPCPWM\tset-up, clear-down\n`),\n  tsv(`\nCOM0B\tCOM0B1\tCOM0B0\ttimerMode\tCompareOutputModeB\n0\t0\t0\tNormal\tdisconnect\n1\t0\t1\tNormal\ttoggle\n2\t1\t0\tNormal\tclear\n3\t1\t1\tNormal\tset\n0\t0\t0\tCTC\tdisconnect\n1\t0\t1\tCTC\ttoggle\n2\t1\t0\tCTC\tclear\n3\t1\t1\tCTC\tset\n0\t0\t0\tFPWM\tdisconnect\n1\t0\t1\tFPWM\t-\n2\t1\t0\tFPWM\tclear-on-match, set-at-max\n3\t1\t1\tFPWM\tset-on-match, clear-at-max\n0\t0\t0\tPCPWM\tdisconnect\n1\t0\t1\tPCPWM\t-\n2\t1\t0\tPCPWM\tclear-up, set-down\n3\t1\t1\tPCPWM\tset-up, clear-down\n`),\n  tsv(`\nCS0\tCS02\tCS01\tCS00\tclockPrescalerOrSource\tExternalClockInput\n1\t0\t0\t1\t1\tN/A\n2\t0\t1\t0\t8\tN/A\n3\t0\t1\t1\t64\tN/A\n4\t1\t0\t0\t256\tN/A\n5\t1\t0\t1\t1024\tN/A\n6\t1\t1\t0\texternal clock falling edge\tD4\n7\t1\t1\t1\texternal clock rising edge\tD4\n0\t0\t0\t0\tdisconnect\tN/A\n`),\n  tsv(`\nOCIE0A\tinterruptA\tinterruptVectorCodeA\n0\toff\t//nocode\n1\ton\tISR(TIMER0_COMPA_vect) {\\\\n    /* on OCR0A match */\\\\n}\n`),\n  tsv(`\nOCIE0B\tinterruptB\tinterruptVectorCodeB\n0\toff\t//nocode\n1\ton\tISR(TIMER0_COMPB_vect) {\\\\n    /* on OCR0B match */\\\\n}\n    \n`),\n  tsv(`\nTOIE0\tInterruptOnTimerOverflow\tinterruptVectorCodeOVF\n0\toff\t//nocode\n1\ton\tISR(TIMER0_OVF_vect) {\\\\n    /* on overflow */\\\\n}\n`),\n  tsv(`\nOCnA_OutputPort\n6\n`),\n  tsv(`\nOCnB_OutputPort\n5\n`),\n  // [{ OCR0A: Math.round((255 * 2) / 3) + '' }],\n  // [{ OCR0B: Math.round((255 * 1) / 3) + '' }]\n  [{ OCR0A: '' }],\n  [{ OCR0B: '' }]\n]\nconst timer = { registers, configs }\nexport default timer\n","import { tsv, tsvRegisters } from '../timers'\nimport { TTimerConfig } from '../../helpers/types'\n\nconst registers = tsvRegisters(`\nTCCR1A\tTCCR1B\tTCCR1C\tTIMSK1\tDTR1\tTIFR1\nCOM1A1\tICNC1\tFOC1A\t-\t\t-\nCOM1A0\tICES1\tFOC1B\t-\t\t-\nCOM1B1\t-\t-\tICIE1\t\tICF1\nCOM1B0\tWGM13\t-\t-\t\t-\n-\tWGM12\t-\t-\t\t-\n-\tCS12\t-\tOCIE1A\t\tOCF1B\nWGM11\tCS11\t-\tOCIE1B\t\tOCF1A\nWGM10\tCS10\t-\tTOIE1\t\tTOV1\n`)\nconst configs: TTimerConfig = [\n  tsv(`\ntimerNr\ttimerBits\tcounterMax\tFCPU\n1\t16\t65535\t16000000\n`),\n  tsv(`\nWGM1\tWGM13\tWGM12\tWGM11\tWGM10\ttimerMode\ttopValue\tupdateOcrMoment\tsetTovMoment\n0\t0\t0\t0\t0\tNormal\t0xFFFF\timmediate\tMAX\n1\t0\t0\t0\t1\tPCPWM\t0x00FF\tTOP\tBOTTOM\n2\t0\t0\t1\t0\tPCPWM\t0x01FF\tTOP\tBOTTOM\n3\t0\t0\t1\t1\tPCPWM\t0x03FF\tTOP\tBOTTOM\n4\t0\t1\t0\t0\tCTC\tOCR1A\timmediate\tMAX\n5\t0\t1\t0\t1\tFPWM\t0x00FF\tBOTTOM\tTOP\n6\t0\t1\t1\t0\tFPWM\t0x01FF\tBOTTOM\tTOP\n7\t0\t1\t1\t1\tFPWM\t0x03FF\tBOTTOM\tTOP\n8\t1\t0\t0\t0\tPFCPWM\tICR1\tBOTTOM\tBOTTOM\n9\t1\t0\t0\t1\tPFCPWM\tOCR1A\tBOTTOM\tBOTTOM\n10\t1\t0\t1\t0\tPCPWM\tICR1\tTOP\tBOTTOM\n11\t1\t0\t1\t1\tPCPWM\tOCR1A\tTOP\tBOTTOM\n12\t1\t1\t0\t0\tCTC\tICR1\timmediate\tMAX\n13\t1\t1\t0\t1\treserved\t-\t-\t-\n14\t1\t1\t1\t0\tFPWM\tICR1\tTOP\tTOP\n15\t1\t1\t1\t1\tFPWM\tOCR1A\tTOP\tTOP\n`),\n  tsv(`\nCOM1A\tCOM1A1\tCOM1A0\ttimerMode\tCompareOutputModeA\tWGM1\tCompareOutputModeB\n0\t0\t0\tNormal\tdisconnect\n1\t0\t1\tNormal\ttoggle\n2\t1\t0\tNormal\tclear\n3\t1\t1\tNormal\tset\n0\t0\t0\tCTC\tdisconnect\n1\t0\t1\tCTC\ttoggle\n2\t1\t0\tCTC\tclear\n3\t1\t1\tCTC\tset\n0\t0\t0\tFPWM\tdisconnect\n1\t0\t1\tFPWM\ttoggle\t15\tdisconnect\n2\t1\t0\tFPWM\tclear-on-match, set-at-max\n3\t1\t1\tFPWM\tset-on-match, clear-at-max\n0\t0\t0\tPCPWM\tdisconnect\n1\t0\t1\tPCPWM\ttoggle\t11\tdisconnect\n2\t1\t0\tPCPWM\tclear-up, set-down\n3\t1\t1\tPCPWM\tset-up, clear-down\n0\t0\t0\tPFCPWM\tdisconnect\n1\t0\t1\tPFCPWM\ttoggle\t9\tdisconnect\n2\t1\t0\tPFCPWM\tclear-up, set-down\n3\t1\t1\tPFCPWM\tset-up, clear-down\n`),\n  tsv(`\nCOM1B\tCOM1B1\tCOM1B0\ttimerMode\tCompareOutputModeB\ttopValue\n0\t0\t0\tNormal\tdisconnect\n1\t0\t1\tNormal\ttoggle\n2\t1\t0\tNormal\tclear\n3\t1\t1\tNormal\tset\n0\t0\t0\tCTC\tdisconnect\n1\t0\t1\tCTC\ttoggle\n2\t1\t0\tCTC\tclear\n3\t1\t1\tCTC\tset\n0\t0\t0\tFPWM\tdisconnect\n1\t0\t1\tFPWM\tdisconnect\n2\t1\t0\tFPWM\tclear-on-match, set-at-max\n3\t1\t1\tFPWM\tset-on-match, clear-at-max\n0\t0\t0\tPCPWM\tdisconnect\n1\t0\t1\tPCPWM\tdisconnect\n2\t1\t0\tPCPWM\tclear-up, set-down\n3\t1\t1\tPCPWM\tset-up, clear-down\n0\t0\t0\tPFCPWM\tdisconnect\n1\t0\t1\tPFCPWM\tdisconnect\n2\t1\t0\tPFCPWM\tclear-up, set-down\n3\t1\t1\tPFCPWM\tset-up, clear-down\n`),\n  tsv(`\nCS1\tCS12\tCS11\tCS10\tclockPrescalerOrSource\tExternalClockInput\n1\t0\t0\t1\t1\tN/A\n2\t0\t1\t0\t8\tN/A\n3\t0\t1\t1\t64\tN/A\n4\t1\t0\t0\t256\tN/A\n5\t1\t0\t1\t1024\tN/A\n6\t1\t1\t0\texternal clock falling edge\tD5\n7\t1\t1\t1\texternal clock rising edge\tD5\n0\t0\t0\t0\tdisconnect\tN/A\n`),\n  tsv(`\nOCIE1A\tinterruptA\tinterruptVectorCodeA\n0\toff\t//nocode\n1\ton\tISR(TIMER1_COMPA_vect) {\\\\n    /* on OCR0A match */\\\\n}\n`),\n  tsv(`\nOCIE1B\tinterruptB\tinterruptVectorCodeB\n0\toff\t//nocode\n1\ton\tISR(TIMER1_COMPB_vect) {\\\\n    /* on OCR0B match */\\\\n}\n    \n`),\n  tsv(`\nTOIE1\tInterruptOnTimerOverflow\tinterruptVectorCodeOVF\n0\toff\t//nocode\n1\ton\tISR(TIMER1_OVF_vect) {\\\\n    /* on overflow */\\\\n}\n`),\n  tsv(`\nICIE1\tInterruptOnInputCapture\tinterruptVectorCaptureCode\n0\toff\t//nocode\n1\ton\tISR(TIMER1_CAPT_vect) {\\\\n    /* on input capture */\\\\n}\n`),\n  tsv(`\nICNC1\tInputCaptureNoiseSupression\n0\toff\n1\ton\n`),\n  tsv(`\nICES1\tInputCaptureEdgeSelect\n0\tfalling\n1\trising\n`),\n  tsv(`\nOCnB_OutputPort\n10\n`),\n  tsv(`\nOCnA_OutputPort\n9\n`),\n  // [{ ICR1: Math.round((65535 * 3) / 4) + '' }],\n  // [{ OCR1A: Math.round((65535 * 2) / 4) + '' }],\n  // [{ OCR1B: Math.round((65535 * 1) / 4) + '' }]\n  [{ ICR1: '' }],\n  [{ OCR1A: '' }],\n  [{ OCR1B: '' }]\n]\nconst timer = { registers, configs }\nexport default timer\n","import { tsv, tsvRegisters } from '../timers'\nimport { TTimerConfig } from '../../helpers/types'\n\nconst registers = tsvRegisters(`\nTCCR2A\tTCCR2B\tTIMSK2\tTIFR2\nCOM2A1\tFOC2A\t-\t-\nCOM2A0\tFOC2B\t-\t-\nCOM2B1\t-\t-\t-\nCOM2B0\t-\t-\t-\n-\tWGM22\t-\t-\n-\tCS22\tOCIE2B\tOCF2B\nWGM21\tCS21\tOCIE2A\tOCF2A\nWGM20\tCS20\tTOIE2\tTOV2\n`)\nconst configs: TTimerConfig = [\n  tsv(`\ntimerNr\ttimerBits\tcounterMax\tFCPU\n2\t8\t255\t16000000\n  `),\n  tsv(`\nWGM2\tWGM22\tWGM21\tWGM20\ttimerMode\ttopValue\tupdateOcrMoment\tsetTovMoment\n0\t0\t0\t0\tNormal\t0xFF\timmediate\tMAX\n1\t0\t0\t1\tPCPWM\t0xFF\tTOP\tBOTTOM\n2\t0\t1\t0\tCTC\tOCR2A\timmediate\tMAX\n3\t0\t1\t1\tFPWM\t0xFF\tTOP\tMAX\n4\t1\t0\t0\t-\t-\t-\t-\n5\t1\t0\t1\tPCPWM\tOCR2A\tTOP\tBOTTOM\n6\t1\t1\t0\t-\t-\t-\t-\n7\t1\t1\t1\tFPWM\tOCR2A\tTOP\tTOP\n  `),\n  tsv(`\nCOM2A\tCOM2A1\tCOM2A0\ttimerMode\tCompareOutputModeA\n0\t0\t0\tNormal\tdisconnect\n1\t0\t1\tNormal\ttoggle\n2\t1\t0\tNormal\tclear\n3\t1\t1\tNormal\tset\n0\t0\t0\tCTC\tdisconnect\n1\t0\t1\tCTC\ttoggle\n2\t1\t0\tCTC\tclear\n3\t1\t1\tCTC\tset\n0\t0\t0\tFPWM\tdisconnect\n1\t0\t1\tFPWM\t-\n2\t1\t0\tFPWM\tclear-on-match, set-at-max\n3\t1\t1\tFPWM\tset-on-match, clear-at-max\n0\t0\t0\tPCPWM\tdisconnect\n1\t0\t1\tPCPWM\t-\n2\t1\t0\tPCPWM\tclear-up, set-down\n3\t1\t1\tPCPWM\tset-up, clear-down\n`),\n  tsv(`\nCOM2B\tCOM2B1\tCOM2B0\ttimerMode\tCompareOutputModeB\n0\t0\t0\tNormal\tdisconnect\n1\t0\t1\tNormal\ttoggle\n2\t1\t0\tNormal\tclear\n3\t1\t1\tNormal\tset\n0\t0\t0\tCTC\tdisconnect\n1\t0\t1\tCTC\ttoggle\n2\t1\t0\tCTC\tclear\n3\t1\t1\tCTC\tset\n0\t0\t0\tFPWM\tdisconnect\n1\t0\t1\tFPWM\t-\n2\t1\t0\tFPWM\tclear-on-match, set-at-max\n3\t1\t1\tFPWM\tset-on-match, clear-at-max\n0\t0\t0\tPCPWM\tdisconnect\n1\t0\t1\tPCPWM\t-\n2\t1\t0\tPCPWM\tclear-up, set-down\n3\t1\t1\tPCPWM\tset-up, clear-down\n`),\n  tsv(`\nCS2\tCS22\tCS21\tCS20\tclockPrescalerOrSource\n1\t0\t0\t1\t1\n2\t0\t1\t0\t8\n3\t0\t1\t1\t32\n4\t1\t0\t0\t64\n5\t1\t0\t1\t128\n6\t1\t1\t0\t256\n7\t1\t1\t1\t1024\n0\t0\t0\t0\tdisconnect\n`),\n  tsv(`\nOCIE2A\tinterruptA\tinterruptVectorCodeA\n0\toff  \t//nocode\n1\ton\tISR(TIMER2_COMPA_vect) {\\\\n    /* on OCR2A match */\\\\n}\n`),\n  tsv(`\nOCIE2B\tinterruptB\tinterruptVectorCodeB\n0\toff  \t//nocode\n1\ton\tISR(TIMER2_COMPB_vect) {\\\\n    /* on OCR2B match */\\\\n}\n    \n`),\n  tsv(`\nTOIE2\tInterruptOnTimerOverflow\tinterruptVectorCodeOVF\n0\toff  \t//nocode\n1\ton\tISR(TIMER2_OVF_vect) {\\\\n    /* on overflow */\\\\n}\n`),\n  tsv(`\nOCnA_OutputPort\n11\n`),\n  tsv(`\nOCnB_OutputPort\n3\n`),\n  // [{ OCR2A: Math.round((255 * 2) / 3) + '' }],\n  // [{ OCR2B: Math.round((255 * 1) / 3) + '' }]\n  [{ OCR2A: '' }],\n  [{ OCR2B: '' }]\n]\nconst timer = { registers, configs }\nexport default timer\n","import lgt328p from './lgt328p'\nimport atmega328p from './atmega328p'\nimport { MicroControllers } from '../helpers/types'\nconst timers = {\n  [MicroControllers.LGT8F328P]: lgt328p,\n  [MicroControllers.ATMEGA328P]: atmega328p\n}\nexport default timers\n","import {\n  atom,\n  atomFamily,\n  DefaultValue,\n  selector,\n  selectorFamily,\n  useSetRecoilState\n} from 'recoil'\nimport { setHashFromObject, setHashParam, useHashParams } from './useHash'\n\nimport timers from '../data'\nimport { useEffect, useRef } from 'react'\nimport { MicroControllers, PanelModes } from '../helpers/types'\n\nexport const panelModeState = atom({\n  key: 'PanelModeState',\n  default: PanelModes.Normal\n})\n\nexport function usePrevious<T>(value: T) {\n  const ref = useRef<T>()\n  useEffect(() => {\n    ref.current = value\n  })\n  return ref.current\n}\nconst defaultState = { mcu: MicroControllers.LGT8F328P, timer: '0' }\nexport const RegisterLocationStateChange = () => {\n  const params = useHashParams()\n  const prev = usePrevious(params)\n  const withNulls: Record<string, string | undefined> = { ...defaultState }\n  for (const key in { ...params, ...prev }) {\n    withNulls[key] = params[key]\n  }\n  useSetRecoilState(userConfigBitBulkState)(withNulls)\n  return <></>\n}\nexport const RegisterLocationState = () => {\n  return (\n    <>\n      <RegisterLocationStateChange />\n    </>\n  )\n}\nconst userConfigState_internal = atomFamily<string | undefined, string>({\n  key: 'userConfigState_internal',\n  default: (param) => undefined\n})\nconst userConfigBitBulkState = selector<Record<string, string | undefined>>({\n  key: 'userConfigBitBulkState',\n  get: ({ get }) => {\n    throw new Error('Dont use')\n  },\n  set: ({ set }, obj) => {\n    if (obj instanceof DefaultValue) return\n    for (const key in obj) {\n      set(userConfigState_internal(key), obj[key])\n    }\n    setHashFromObject(obj)\n  }\n})\n\nexport const userConfigBitState = selectorFamily<string | undefined, string>({\n  key: 'userConfigBitState',\n  get:\n    (bitName: string) =>\n    ({ get }) =>\n      get(userConfigState_internal(bitName)),\n  set:\n    (bitName: string) =>\n    ({ get, set }, value) => {\n      if (value instanceof DefaultValue) value = undefined\n      const current = get(userConfigState_internal(bitName))\n      if (current !== value) {\n        setHashParam(bitName, value)\n      }\n    }\n})\n\nexport const mcuTimers = selector({\n  key: 'mcuTimers',\n  get: ({ get }) => {\n    const micro = get(userConfigBitState('mcu')) as MicroControllers\n    return timers[micro]\n  }\n})\nexport const timerState = selector({\n  key: 'timerState',\n  get: ({ get }) => get(mcuTimers)[+(get(userConfigBitState('timer')) || 0)]\n})\n","import every from 'lodash/every'\nimport { TTable } from './types'\n\nimport uniq from 'lodash/uniq'\nimport mapValues from 'lodash/mapValues'\nimport intersection from 'lodash/intersection'\nimport { pickBy } from 'lodash'\n\nexport const getValuesPerBitName = (configs: TTable[]) => {\n  let valuesPerBitName: Record<string, string[]> = {}\n  for (const table of configs) {\n    for (const row of table) {\n      for (const col in row) {\n        const val = row[col]\n        valuesPerBitName[col] = valuesPerBitName[col] || []\n        if (val) valuesPerBitName[col].push(val)\n      }\n    }\n  }\n  return mapValues(valuesPerBitName, uniq)\n}\n\nexport const splitTables = ([left, ...tables]: TTable[]): TTable[][] => {\n  if (!left) return []\n  const cluster = [left]\n  let remaining: TTable[] = []\n  let colsLeft = Object.keys(left[0])\n  let changed\n  do {\n    changed = false\n    remaining = []\n\n    for (const table of tables) {\n      const colsRight = Object.keys(table[0])\n      const match = intersection(colsLeft, colsRight).length > 0\n      if (match) {\n        cluster.push(table)\n        colsLeft = uniq([...colsLeft, ...colsRight])\n        changed = true\n      } else {\n        remaining.push(table)\n      }\n    }\n    tables = remaining\n  } while (changed)\n\n  return [cluster, ...splitTables(remaining)]\n}\nexport function isTruthy<TValue>(value: TValue | undefined): value is TValue {\n  return !!value\n}\n\nconst negatedMatch = (a: string, b: string) => {\n  const [, negA] = a.match(/!(.*)/) || []\n  const [, negB] = b.match(/!(.*)/) || []\n  if (negA) {\n    if (!b) return a\n    if (negA !== b) return b\n  }\n  if (negB) {\n    if (!a) return b\n    if (negB !== a) return a\n  }\n  return false\n}\nconst _joinTables = ([left, right, ...tables]: TTable[]): TTable => {\n  if (!right) return left\n  const joined = left.flatMap((leftRow) =>\n    right\n      .map((rightRow) => {\n        const row = { ...leftRow }\n        const keep = every(rightRow, (rightVal, key) => {\n          const leftVal = leftRow[key]\n          const negMatch = negatedMatch(leftVal || '', rightVal || '')\n          if (!leftVal && !rightVal) return true\n          else if (!leftVal) row[key] = rightVal\n          else if (!rightVal) row[key] = leftVal\n          else if (negMatch !== false) row[key] = negMatch\n          else if (leftVal !== rightVal) return false\n          return true\n        })\n        if (!keep) return undefined\n        return row\n      })\n      .filter(isTruthy)\n  )\n  return _joinTables([joined, ...tables])\n}\nexport const joinTables = (tables: TTable[]): TTable => {\n  // first remove empty bitValues to improve speed (bitValue=''|undefined means the value is not constrained)\n  const cleanTables = tables.map((table) => table.map((row) => pickBy(row)))\n  return _joinTables(cleanTables)\n}\n","import { uniq } from 'lodash'\nimport { selector, selectorFamily } from 'recoil'\nimport { isTruthy, joinTables, splitTables } from '../helpers/helpers'\nimport { TRow, TTable } from '../helpers/types'\nimport { timerState, userConfigBitState } from '../state/state'\n\nexport const groupsState = selector({\n  key: 'groupsState',\n  get: ({ get }) => splitTables(get(timerState).configs)\n})\n\nconst getBitNames = (group: TTable[]) => {\n  if (group === undefined) debugger\n  return uniq(group.flatMap((table: TTable) => Object.keys(table[0])))\n}\n\nexport const suggestedBitAssignmentState = selectorFamily({\n  key: 'suggestedBitAssignmentState',\n  get:\n    (bitName: string) =>\n    ({ get }) => {\n      const groupIdx = get(groupIdxFromBitNameState(bitName))\n      if (groupIdx === -1) return undefined\n      const fullAssignments = get(groupAssignmentsState(groupIdx))\n      return fullAssignments[0][bitName]\n    }\n})\nexport const suggestedAssignmentState = selector<TRow>({\n  key: 'suggestedAssignmentState',\n  get: ({ get }) => {\n    const assignments = get(groupsState)\n      .map((_, i) => get(groupAssignmentsState(i))[0])\n      .flat()\n    return Object.assign({}, ...assignments)\n  }\n})\nexport const groupConfigState = selectorFamily({\n  key: 'groupConfigState',\n  get:\n    (groupIdx: number) =>\n    ({ get }) => {\n      const tableSets = get(groupsState)\n      const group = tableSets[groupIdx]\n      const relevantBitNames = getBitNames(group)\n      const userConfig: TRow = {}\n      for (const bitName of relevantBitNames) {\n        const userBitConfig = get(userConfigBitState(bitName))\n        if (userBitConfig !== undefined) userConfig[bitName] = userBitConfig\n      }\n      return userConfig\n    }\n})\n\nexport const groupIdxFromBitNameState = selectorFamily({\n  key: 'groupIdxFromBitNameState',\n  get:\n    (bitName: string) =>\n    ({ get }) => {\n      const tableSets = get(groupsState)\n      const idx = tableSets.findIndex((group) =>\n        group.some((table) => table[0].hasOwnProperty(bitName))\n      )\n      return idx\n    }\n})\nexport const groupFromBitNameState = selectorFamily({\n  key: 'groupFromBitNameState',\n  get:\n    (bitName: string) =>\n    ({ get }) => {\n      const tableSets = get(groupsState)\n      const idx = get(groupIdxFromBitNameState(bitName))\n      return tableSets[idx]\n    }\n})\nexport const groupAssignmentsState = selectorFamily({\n  key: 'groupAssignmentsState',\n  get:\n    (groupIdx: number) =>\n    ({ get }) => {\n      const tableSets = get(groupsState)\n      const group = tableSets[groupIdx]\n      const userState = get(groupConfigState(groupIdx))\n      return joinTables([[userState], ...group])\n    }\n})\nexport const allBitOptionsState = selectorFamily({\n  key: 'allBitOptionsState',\n  get:\n    (bitName: string) =>\n    ({ get }) => {\n      const group = get(groupFromBitNameState(bitName))\n      return uniq(\n        group\n          .flat()\n          .map((col) => col[bitName])\n          .filter(isTruthy)\n      )\n    }\n})\nexport const enabledBitOptionsState = selectorFamily({\n  key: 'enabledBitOptionsState',\n  get:\n    (bitName: string) =>\n    ({ get }) => {\n      // todo, cleanup, perf\n      const group = get(groupFromBitNameState(bitName))\n      const groupIdx = get(groupIdxFromBitNameState(bitName))\n      const userState = get(groupConfigState(groupIdx))\n      const fullAssignments = get(groupAssignmentsState(groupIdx))\n      let enabledAssignments = fullAssignments\n      if (userState[bitName]) {\n        const selectedWithout = { ...userState, [bitName]: undefined }\n        enabledAssignments = joinTables([[selectedWithout], ...group])\n      }\n      return uniq(\n        enabledAssignments.map((col) => col[bitName]).filter(isTruthy)\n      )\n    }\n})\nexport const bitOptionsState = selectorFamily({\n  key: 'bitOptionsState',\n  get:\n    (bitName: string) =>\n    ({ get }) => {\n      const groupIdx = get(groupIdxFromBitNameState(bitName))\n      const userState = get(groupConfigState(groupIdx))\n      const fullAssignments = get(groupAssignmentsState(groupIdx))\n      const allBitOptions = get(allBitOptionsState(bitName))\n      const enabledOptions = get(enabledBitOptionsState(bitName))\n      const forcedOption =\n        !userState[bitName] && enabledOptions.length === 1\n          ? fullAssignments[0][bitName]\n          : undefined\n      const suggestedOption =\n        !userState[bitName] && enabledOptions.length > 1\n          ? fullAssignments[0][bitName]\n          : undefined\n      return {\n        bitName,\n        selectedOption: userState[bitName],\n        suggestedOption: suggestedOption || forcedOption || userState[bitName],\n        forcedOption: forcedOption,\n        options: allBitOptions.map((value) => ({\n          isSuggested: value === suggestedOption,\n          value,\n          isDisabled: !enabledOptions.includes(value) || !!forcedOption\n        }))\n      }\n    }\n})\n\nexport type TCheckboxGroupData = {\n  bitName: string\n  selectedOption: string | undefined\n  suggestedOption: string | undefined\n  forcedOption: string | undefined\n  options: {\n    isSuggested: boolean\n    value: string\n    isDisabled: boolean\n  }[]\n}[]\nexport type TCheckboxMinimalGroupData = {\n  bitName: string\n  options: {\n    value: string\n  }[]\n}[]\n","import { useEffect, useRef } from 'react'\nimport useSize from '@react-hook/size'\nimport { Tag } from 'rsuite'\n\nimport XAxis from './XAxis'\nimport YAxis from './YAxis'\nimport { scaleLinear, extent } from 'd3'\nimport { margin } from './margin'\nimport simTimer from '../helpers/simulator'\n\nimport './Plot.css'\nimport CompareRegisterHandle, {\n  CompareRegisterHandleRef\n} from './CompareRegisterHandle'\nimport InterruptArrow from './InterruptArrow'\nimport { Curve } from './Curve'\nimport {\n  getAllCompareRegTraits,\n  getCompareRegTraits\n} from '../helpers/compareRegisterUtil'\nimport { useRecoilValue, useSetRecoilState } from 'recoil'\nimport { usePrevious, userConfigBitState } from '../state/state'\nimport { suggestedAssignmentState } from '../Panes/state'\n\ntype Props = {\n  style: Object\n}\nexport default function Plot({ style }: Props) {\n  const bitValues = useRecoilValue(suggestedAssignmentState)\n  const counterMax = parseInt(bitValues.counterMax!)\n  const param = {\n    timerNr: bitValues.timerNr,\n    timerMode: bitValues.timerMode as any,\n    prescaler: parseInt(bitValues.clockPrescalerOrSource!),\n    cpuHz:\n      parseInt(bitValues.FCPU || '1') *\n      (bitValues.clockDoubler === 'on' ? 2 : 1),\n    top: 0,\n    counterMax: parseInt(bitValues.counterMax!),\n    tovTime: bitValues.setTovMoment as any,\n    OCRnXs: [] as number[],\n    OCRnXs_behaviour: [\n      bitValues.CompareOutputModeA as any,\n      bitValues.CompareOutputModeB as any,\n      bitValues.CompareOutputModeC as any\n    ],\n    ICRn: 0,\n    deadTimeEnable: bitValues.DeadTime === 'on',\n    deadTimeA: getCompareRegTraits('DeadTimeA', bitValues).value,\n    deadTimeB: getCompareRegTraits('DeadTimeB', bitValues).value\n  }\n\n  const IOCR_states = getAllCompareRegTraits(bitValues).map((traits, i) => ({\n    ...traits,\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    ref: useRef<CompareRegisterHandleRef>(null),\n    i\n  }))\n\n  param.OCRnXs = IOCR_states.filter(({ isOutput }) => isOutput).map(\n    ({ value }) => value\n  )\n\n  param.ICRn = IOCR_states.find(({ isInput }) => isInput)!.value\n\n  param.top =\n    IOCR_states.find(({ isTop }) => isTop)?.value ??\n    parseInt(bitValues.topValue!)\n  const ocrMax = parseInt(bitValues.topValue!) || counterMax\n\n  /* TODO: put somewhere else */\n  /* DEFAULTS FOR COMPARE REGISTERS */\n  {\n    const prev = usePrevious(IOCR_states)\n    const ioCount = IOCR_states.filter(\n      ({ isDeadTime, isUsed }) => !isDeadTime\n    ).length\n    IOCR_states.forEach((iocr, i) => {\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      const setReg = useSetRecoilState(userConfigBitState(iocr.name))\n      const top = param.top || Number.parseInt(bitValues.counterMax!)\n      if (prev && !prev[i].isUsed && iocr.isUsed) {\n        const n = iocr.isDeadTime\n          ? Math.sqrt(counterMax) / 2\n          : (top / (ioCount + 1)) * (i + 1)\n        setReg('' + Math.round(n))\n      }\n      if (prev?.[i].isUsed && !iocr.isUsed) {\n        setReg(undefined)\n      }\n    })\n  }\n  /* --- */\n  const simulation = simTimer(param)\n  const containerRef = useRef<HTMLDivElement>(null)\n  const [width, height_] = useSize(containerRef)\n  const height_ouputCompare = 30\n  const margin_ouputCompare = 10\n  const activeOCnXs = IOCR_states.filter(({ isActiveOutput }) => isActiveOutput)\n  const height_timer =\n    height_ - height_ouputCompare * (activeOCnXs.length + 0.5)\n  const xScale = scaleLinear()\n    .domain(extent(simulation.t) as [number, number])\n    .range([margin.left, width - margin.right])\n  const yScale = scaleLinear()\n    .domain([0, ocrMax])\n    .rangeRound([height_timer - margin.bottom, margin.top])\n\n  useEffect(() => {\n    const containerEl = containerRef.current\n\n    const handleMouseUp = (e: Event) => {\n      IOCR_states.forEach(({ ref }) => ref.current?.onMouseUp(undefined as any))\n    }\n    const handleMouseMove = (e: MouseEvent | TouchEvent) => {\n      if (!containerEl) return\n      let y = e instanceof MouseEvent ? e.clientY : e.targetTouches[0].clientY\n      const targetY = containerEl.getBoundingClientRect().y\n      const offsetY = y - targetY\n      IOCR_states.forEach(({ ref }) => ref.current?.onMouseMove(offsetY, e))\n    }\n    document.addEventListener('mouseup', handleMouseUp)\n    document.addEventListener('touchend', handleMouseUp)\n    containerEl?.addEventListener('mousemove', handleMouseMove, {\n      passive: false\n    })\n    containerEl?.addEventListener('touchmove', handleMouseMove, {\n      passive: false\n    })\n    return () => {\n      document.removeEventListener('mouseup', handleMouseUp)\n      document.removeEventListener('touchend', handleMouseUp)\n      containerEl?.removeEventListener('mousemove', handleMouseMove)\n      containerEl?.removeEventListener('touchmove', handleMouseMove)\n    }\n  }, [IOCR_states])\n  return (\n    <div className=\"plotContainer\" ref={containerRef} style={style}>\n      <Tag className=\"frequency\">\n        Freq: {Math.round(simulation.freq * 100) / 100}Hz\n      </Tag>\n      <svg className=\"plot\">\n        <XAxis {...{ xScale, height: height_timer, data: simulation }} />\n        <YAxis {...{ yScale, width }} />\n        <Curve\n          {...{\n            xScale,\n            yScale,\n            width,\n            height: height_timer,\n            data: simulation.t.map((t, i) => [t, simulation.TCNT[i]]),\n            idx: 'TCNT',\n            key: 'TCNT'\n          }}\n        />\n        {activeOCnXs.map(({ isActiveOutput, i }, k) => {\n          const yScale = scaleLinear()\n            .domain([0, 1])\n            .rangeRound([\n              height_timer + height_ouputCompare * (k + 1),\n              height_timer + height_ouputCompare * k + margin_ouputCompare\n            ])\n          return (\n            <>\n              {isActiveOutput && (\n                <Curve\n                  {...{\n                    key: 'OC' + i,\n                    idx: i,\n                    name: 'OC' + param.timerNr + 'ABC'[i],\n                    xScale,\n                    yScale,\n                    data: simulation.t.map((t, j) => [\n                      t,\n                      simulation.OCnXs[i][j]\n                    ])\n                  }}\n                />\n              )}\n              {param.deadTimeEnable && (\n                <Curve\n                  {...{\n                    key: 'DeadTime-' + i,\n                    idx: 'DeadTime-' + i,\n                    name: '',\n                    xScale,\n                    yScale,\n                    data: [\n                      [0, 0],\n                      ...simulation.t.map((t, j) => [\n                        t,\n                        simulation.deadTimes[i][j]\n                      ]),\n                      [simulation.t[simulation.t.length - 1], 0]\n                    ] as [number, number][]\n                  }}\n                />\n              )}\n            </>\n          )\n        })}\n\n        {simulation.MATCH_Xs.flatMap(\n          (matches, i) =>\n            IOCR_states[i].isInterrupt && (\n              <InterruptArrow\n                {...{\n                  key: i + 'interrupt',\n                  flagValues: matches,\n                  TCNT: simulation.TCNT,\n                  t: simulation.t,\n                  xScale,\n                  yScale,\n                  label: 'OCR' + bitValues.timerNr + 'ABC'[i] + ' interrupt'\n                }}\n              />\n            )\n        )}\n        {IOCR_states.find(({ isInput }) => isInput)!.isInterrupt && (\n          <InterruptArrow\n            {...{\n              flagValues: simulation.CAPT,\n              TCNT: simulation.TCNT,\n              t: simulation.t,\n              xScale,\n              yScale,\n              label: 'Capture interrupt',\n              key: 'Capture interrupt'\n            }}\n          />\n        )}\n        {bitValues.InterruptOnTimerOverflow === 'on' && (\n          <InterruptArrow\n            {...{\n              flagValues: simulation.OVF,\n              TCNT: simulation.TCNT,\n              t: simulation.t,\n              xScale,\n              yScale,\n              label: 'Overflow interrupt',\n              key: 'Overflow interrupt'\n            }}\n          />\n        )}\n\n        {IOCR_states.map(({ isUsed, ref, value, name }) => {\n          // eslint-disable-next-line react-hooks/rules-of-hooks\n          const setUserConfigBit = useSetRecoilState(userConfigBitState(name))\n\n          // TODO: redo the extent thing with DTRs\n          const yExtent2: [number, number] = name.startsWith('DTR')\n            ? [0, Math.sqrt(counterMax + 1) - 1]\n            : [0, ocrMax]\n          const yScale = scaleLinear()\n            .domain(yExtent2)\n            .rangeRound([height_timer - margin.bottom, margin.top])\n          return (\n            isUsed && (\n              <CompareRegisterHandle\n                {...{\n                  key: name,\n                  ref,\n                  width,\n                  yExtent: yExtent2,\n                  yScale,\n                  compareRegisterValue: value,\n                  setCompareRegisterValue: (val: number) =>\n                    // eslint-disable-next-line react-hooks/rules-of-hooks\n                    setUserConfigBit(val + ''),\n                  name\n                }}\n              />\n            )\n          )\n        })}\n      </svg>\n    </div>\n  )\n}\n","import { map } from 'lodash'\nimport { useRecoilValue } from 'recoil'\nimport { getAllCompareRegTraits } from '../helpers/compareRegisterUtil'\nimport { isTruthy } from '../helpers/helpers'\nimport { timerState } from '../state/state'\nimport { suggestedAssignmentState, suggestedBitAssignmentState } from './state'\nimport { Button } from 'rsuite'\nimport copy from 'copy-to-clipboard'\nimport React, { useEffect, useRef, useState } from 'react'\nconst omitRegisterZeros = true\n\nfunction LinkToThisPage() {\n  const [url, setUrl] = useState(window.location.href)\n  useEffect(() => {\n    const handleUrlChange = () => {\n      setUrl(window.location.href)\n    }\n    window.addEventListener('hashchange', handleUrlChange)\n    return () => window.removeEventListener('hashchange', handleUrlChange)\n  }, [])\n  return <>{'/* ' + url + ' */\\n'}</>\n}\nexport default function Code() {\n  const codeContainerRef = useRef<HTMLPreElement>(null)\n  return (\n    <>\n      <CopyToClipboard codeContainerRef={codeContainerRef} />\n      <pre style={{ margin: 0 }} ref={codeContainerRef}>\n        {`\\\nvoid setup(){\n  `}\n        <LinkToThisPage />\n        {`  noInterrupts();\\n`}\n        <TimerConfgCode />\n        <CompareRegsCode />\n        <PortDir />\n        {`  interrupts();\n}\n`}\n        <Interrupts />\n      </pre>\n    </>\n  )\n}\nconst PortDir = () => {\n  const suggestedConfig = useRecoilValue(suggestedAssignmentState)\n  const code = getAllCompareRegTraits(suggestedConfig)\n    .filter(({ isActiveOutput }) => isActiveOutput)\n    .flatMap(({ pinModeCode }) => pinModeCode)\n  let str = code.join('\\n  ')\n  if (str.length) str = '  ' + str + '\\n'\n  return <>{str}</>\n}\nconst TimerConfgCode = () => {\n  const omitBitZeros = true\n  const { registers } = useRecoilValue(timerState)\n  const code = map(registers, (bitNames, regName) => {\n    const bitAssignments = bitNames\n      .map((bitName) => {\n        const bitValue =\n          // eslint-disable-next-line react-hooks/rules-of-hooks\n          useRecoilValue(suggestedBitAssignmentState(bitName)) || '0'\n        if (omitBitZeros && bitValue === '0') return ''\n        return `${bitValue} << ${bitName}`\n      })\n      .filter(isTruthy)\n    const bitAssignmentsStr = bitAssignments.length\n      ? `\\n    ${bitAssignments.join(' |\\n    ')}`\n      : '0'\n    if (omitRegisterZeros && bitAssignmentsStr === '0') return ''\n    return `  ${regName} = ${bitAssignmentsStr};`\n  })\n    .flat()\n    .filter(isTruthy)\n  let str = code.join('\\n')\n  if (str.length) str += '\\n'\n  return <>{str}</>\n}\nfunction CompareRegsCode() {\n  const suggestedConfig = useRecoilValue(suggestedAssignmentState)\n\n  const code = getAllCompareRegTraits(suggestedConfig)\n    .filter(({ isUsed }) => isUsed)\n    .map(({ code }) => code)\n  let str = code.join('\\n  ')\n  if (str.length) str = '  ' + str + '\\n'\n  return <>{str}</>\n}\nfunction Interrupts() {\n  const interruptBitNames = [\n    'interruptVectorCodeA',\n    'interruptVectorCodeB',\n    'interruptVectorCodeC',\n    'interruptVectorCodeOVF',\n    'interruptVectorCaptureCode'\n  ]\n  const interruptCommonSignature = useRecoilValue(\n    suggestedBitAssignmentState('InterruptCommonSignature')\n  )\n  let code = interruptBitNames\n    .map(\n      (bitName) =>\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        useRecoilValue(suggestedBitAssignmentState(bitName)) || '//nocode'\n    )\n    .filter((bitValue) => bitValue !== '//nocode')\n\n  if (code.length && interruptCommonSignature) {\n    code = [\n      interruptCommonSignature + ' {',\n      ...code.map((code) => '    ' + code.split('\\n').join('\\n    ')),\n      '}'\n    ]\n  }\n  let str = code.join('\\n')\n  if (str.length) str += '\\n'\n  return <>{str}</>\n}\n\nconst CopyToClipboard = React.memo(\n  ({\n    codeContainerRef\n  }: {\n    codeContainerRef: React.RefObject<HTMLPreElement>\n  }) => {\n    // using refs to avoid rerenders\n    const [clicked, setClicked] = useState(false)\n    useEffect(() => {\n      setTimeout(() => setClicked(false), 600)\n    }, [clicked])\n    return (\n      <div>\n        <Button\n          color={clicked ? 'green' : undefined}\n          onClick={() => {\n            copy(codeContainerRef.current?.textContent || '')\n            setClicked(true)\n            console.log(codeContainerRef.current?.textContent || '')\n          }}\n        >\n          {clicked ? 'Copied' : 'Copy'}\n        </Button>\n      </div>\n    )\n  }\n)\n","import {\n  Checkbox,\n  CheckboxGroup,\n  FlexboxGrid,\n  Icon,\n  Panel,\n  Tooltip,\n  Whisper\n} from 'rsuite'\nimport { useRecoilValue, useSetRecoilState } from 'recoil'\nimport { bitNameDescriptions, bitValueDescriptions } from '../data/timers'\nimport { difference, map, uniq } from 'lodash'\nimport './TimerSetup.css'\n\nimport Plot from '../Plot/Plot'\nimport Code from './Code'\nimport ResizePanel from 'react-resize-panel-ts'\nimport { panelModeState, userConfigBitState } from '../state/state'\nimport { bitOptionsState, groupsState } from './state'\nimport { TTable, PanelModes } from '../helpers/types'\nconst BitConfig = ({\n  bitName,\n  humanName\n}: {\n  bitName: string\n  humanName?: string\n}) => {\n  const setUserConfigBit = useSetRecoilState(userConfigBitState(bitName))\n  const { selectedOption, forcedOption, options } = useRecoilValue(\n    bitOptionsState(bitName)\n  )\n  const descr = bitValueDescriptions[bitName]\n  const descrTitle = descr?.title\n  return (\n    <CheckboxGroup\n      inline\n      value={[selectedOption || forcedOption]}\n      onChange={(val: string[]) => setUserConfigBit(val[1])}\n    >\n      <p>\n        {humanName || bitName}{' '}\n        {descrTitle && (\n          <Whisper\n            placement=\"right\"\n            trigger=\"hover\"\n            speaker={<Tooltip>{descrTitle}</Tooltip>}\n          >\n            <Icon\n              icon=\"info-circle\"\n              style={{ color: 'lightgrey', fontSize: 12 }}\n            />\n          </Whisper>\n        )}\n      </p>\n      {options.map(({ value, isSuggested, isDisabled }, i) => {\n        const bitValueDescr = descr?.[value]\n\n        return (\n          <span key={i}>\n            <Checkbox\n              indeterminate={isSuggested}\n              value={value}\n              disabled={isDisabled}\n            >\n              {value}\n            </Checkbox>{' '}\n            {bitValueDescr && (\n              <Whisper\n                placement=\"right\"\n                trigger=\"hover\"\n                speaker={<Tooltip>{bitValueDescr}</Tooltip>}\n              >\n                <Icon\n                  icon=\"info-circle\"\n                  style={{ color: 'lightgrey', fontSize: 12 }}\n                />\n              </Whisper>\n            )}\n          </span>\n        )\n      })}\n    </CheckboxGroup>\n  )\n}\n\ntype TPanel = {\n  panelName: string\n  bitNames: {\n    bitName: string\n    humanName?: string\n  }[]\n}\nconst getPanesByGroup = (groups: TTable[][]): TPanel[] =>\n  groups.map((group, i) => ({\n    panelName: `Group ${i}`,\n    bitNames: group\n      .map((table) => Object.keys(table[0]))\n      .flat()\n      .map((bitName) => ({ bitName }))\n  }))\n\nconst getAllBitnamesInGroups = (groups: TTable[][]) =>\n  uniq(\n    groups\n      .flat()\n      .map((table) => Object.keys(table[0]))\n      .flat()\n  )\nconst getPanesGroupedByDescription = (groups: TTable[][]): TPanel[] => {\n  const allBitnamesInGroups = getAllBitnamesInGroups(groups)\n  return map(bitNameDescriptions, (bitDescriptions, panelName) => ({\n    panelName,\n    bitNames: map(bitDescriptions, (humanName, bitName) => ({\n      bitName,\n      humanName\n    })).filter(({ bitName }) => allBitnamesInGroups.includes(bitName))\n  })).filter(({ bitNames }) => bitNames.length)\n}\nconst getHiddenPane = (groups: TTable[][]): TPanel => {\n  const allBitnames = getAllBitnamesInGroups(groups)\n\n  const visibleBitnames: string[] = Object.values(bitNameDescriptions)\n    .map(Object.values)\n    .flat()\n  return {\n    panelName: 'Internals',\n    bitNames: difference(allBitnames, visibleBitnames).map((bitName) => ({\n      bitName\n    }))\n  }\n}\n\nfunction TimerSetup() {\n  const groups = useRecoilValue(groupsState)\n\n  const panelMode = useRecoilValue(panelModeState)\n  let panels: TPanel[]\n  switch (panelMode) {\n    case PanelModes.Normal:\n      panels = getPanesGroupedByDescription(groups)\n      break\n    case PanelModes.Internal:\n      panels = [getHiddenPane(groups), ...getPanesGroupedByDescription(groups)]\n      break\n    case PanelModes.ByDependencies:\n      panels = getPanesByGroup(groups)\n      break\n  }\n  const style = { width: 100 / (panels.length + 1) + '%' }\n\n  const r = (\n    <div className=\"TimerSetup\">\n      <FlexboxGrid style={{ flexGrow: 1, overflow: 'scroll' }}>\n        {panels.map(({ panelName, bitNames }, i) => (\n          <FlexboxGrid.Item key={panelName} style={style}>\n            <Panel header={panelName} bordered shaded defaultExpanded>\n              {bitNames.map(({ bitName, humanName }, i) => (\n                <BitConfig key={i} bitName={bitName} humanName={humanName} />\n              ))}\n            </Panel>\n          </FlexboxGrid.Item>\n        ))}\n        <FlexboxGrid.Item key=\"code\" style={style}>\n          <Panel header=\"Code\" bordered shaded defaultExpanded>\n            <Code />\n          </Panel>\n        </FlexboxGrid.Item>\n      </FlexboxGrid>\n      <ResizePanel\n        direction=\"n\"\n        style={{\n          width: '100%',\n          bottom: 0,\n          flexGrow: 0,\n          borderTop: '1px solid lightgrey',\n          height: 200,\n          touchAction: 'none'\n        }}\n      >\n        <Plot style={{ minHeight: 300 }} />\n      </ResizePanel>\n    </div>\n  )\n  return r\n}\n\nexport default TimerSetup\n","import { map } from 'lodash'\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport { Container, Content, Header, Icon, Nav, Navbar, Dropdown } from 'rsuite'\nimport 'rsuite/dist/styles/rsuite-default.css'\n\nimport './App.css'\nimport TimerSetup from './Panes/TimerSetup'\nimport { PanelModes, MicroControllers } from './helpers/types'\nimport {\n  panelModeState,\n  RegisterLocationState,\n  mcuTimers,\n  userConfigBitState\n} from './state/state'\nimport { setHashFromObject } from './state/useHash'\nconst gh = 'https://github.com/dbuezas/arduino-web-timers'\nconst App = () => {\n  const timerIdx = useRecoilValue(userConfigBitState('timer'))\n  const mcu = useRecoilValue(userConfigBitState('mcu'))\n  const timers = useRecoilValue(mcuTimers)\n  const [panelMode, setPanelMode] = useRecoilState(panelModeState)\n  const isLoading = mcuTimers === undefined || timerIdx === undefined\n  return (\n    <>\n      <link\n        rel=\"stylesheet\"\n        href=\"https://cdnjs.cloudflare.com/ajax/libs/github-fork-ribbon-css/0.2.3/gh-fork-ribbon.min.css\"\n      />\n      <div>\n        <RegisterLocationState />\n        {!isLoading && (\n          <Container className=\"App\">\n            <Header>\n              <Navbar appearance=\"inverse\">\n                <Navbar.Header>\n                  &nbsp;\n                  <span>\n                    <img\n                      src=\"./logo.png\"\n                      alt=\"logo\"\n                      style={{ width: 55.5, height: 55.5, float: 'left' }}\n                    />\n                    &nbsp;\n                    <span\n                      style={{\n                        float: 'left',\n                        marginTop: 7,\n                        textAlign: 'center'\n                      }}\n                    >\n                      ARDUINO WEB\n                      <br />\n                      TIMERS\n                    </span>\n                  </span>\n                </Navbar.Header>\n                <Navbar.Body>\n                  <Nav>\n                    <Dropdown\n                      trigger=\"click\"\n                      icon={<Icon icon=\"microchip\" />}\n                      title={mcu}\n                      placement=\"bottomEnd\"\n                    >\n                      {map(MicroControllers, (aChip) => (\n                        <Dropdown.Item\n                          // active={aChip === mcu}\n                          onSelect={(mcu) =>\n                            setHashFromObject({\n                              mcu,\n                              timer: '0'\n                            })\n                          }\n                          eventKey={aChip}\n                          key={aChip}\n                        >\n                          {aChip}\n                        </Dropdown.Item>\n                      ))}\n                    </Dropdown>\n                  </Nav>\n                  <Nav\n                    activeKey={timerIdx}\n                    onSelect={(timer) =>\n                      setHashFromObject({\n                        mcu,\n                        timer\n                      })\n                    }\n                  >\n                    {timers.map((_: any, i) => (\n                      <Nav.Item\n                        eventKey={'' + i}\n                        key={'' + i}\n                        icon={\n                          <>\n                            <Icon icon=\"line-chart\" />\n                          </>\n                        }\n                      >\n                        Timer {i}\n                      </Nav.Item>\n                    ))}\n                  </Nav>\n                  <Nav pullRight>\n                    <Dropdown\n                      trigger=\"click\"\n                      icon={<Icon icon=\"cog\" />}\n                      title={panelMode}\n                      placement=\"bottomEnd\"\n                    >\n                      {map(PanelModes, (mode) => (\n                        <Dropdown.Item\n                          // active={mode === panelMode}\n                          onSelect={setPanelMode}\n                          eventKey={mode}\n                          key={mode}\n                        >\n                          {mode}\n                        </Dropdown.Item>\n                      ))}\n                    </Dropdown>\n                    <Dropdown\n                      trigger=\"click\"\n                      icon={<Icon icon=\"help-o\" />}\n                      title=\"About\"\n                      placement=\"bottomEnd\"\n                    >\n                      <Dropdown.Item\n                        href={gh + '/discussions/categories/show-and-tell'}\n                        target=\"_blank\"\n                      >\n                        Share what you used this for!\n                      </Dropdown.Item>\n                      <Dropdown.Item\n                        href={gh + '/discussions/categories/q-a'}\n                        target=\"_blank\"\n                      >\n                        Q&A\n                      </Dropdown.Item>\n                      <Dropdown.Item\n                        href={gh + '/discussions/categories/ideas'}\n                        target=\"_blank\"\n                      >\n                        Propose a feature\n                      </Dropdown.Item>\n                      <Dropdown.Item\n                        href={gh + '/issues/new/choose'}\n                        target=\"_blank\"\n                      >\n                        Report a bug\n                      </Dropdown.Item>\n                    </Dropdown>\n                  </Nav>\n                  <iframe\n                    src=\"https://ghbtns.com/github-btn.html?user=dbuezas&repo=arduino-web-timers&type=star&count=true\"\n                    frameBorder=\"0\"\n                    scrolling=\"0\"\n                    width=\"100\"\n                    height=\"20\"\n                    title=\"GitHub\"\n                    style={{ marginTop: 18, float: 'right' }}\n                  ></iframe>\n                </Navbar.Body>\n              </Navbar>\n            </Header>\n            <Content\n              style={{\n                padding: 10,\n                // margin: 20,\n                background: '#fff',\n                position: 'relative'\n              }}\n            >\n              <TimerSetup key={timerIdx + '-' + mcu} />\n            </Content>\n          </Container>\n        )}\n      </div>\n      <a\n        className=\"github-fork-ribbon right-bottom fixed\"\n        href={gh}\n        data-ribbon=\"Fork me on GitHub\"\n        title=\"Fork me on GitHub\"\n      >\n        Fork me on GitHub\n      </a>\n    </>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { RecoilRoot } from 'recoil'\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}